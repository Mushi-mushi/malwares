; This file provides OS-specific information.
;
; Lines that begin with a semi-colon are treated as comments.
; Lines that being ":EOS:" indicate an end of a section.
; Blank lines are NOT permitted.
;
; It's currently divided into two sections:
;
;	[Section I ] Configuration Data
;	[Section II] LP-side Dynamic Data
;
; ------------------- START OF SECTION I --------------------------
;
; The first section contains information used during configuration.
; The section has the following format:
;
;   * line 1: OS version line
;   * line 2: Address for configuration information in a modified image
;   * lines 3..n: Index & Value pairs
;
; All entries must be in hex.
; (Any extra characters on a line are ignored.)
;
; The routine "bfl_readOsFile" is used to read the entire
; first section of data.
;
0x613 			// pix version * 
0x271800                // sizeof(textSection) + sizeof(dataSection) + relocation of a.out
#0x27cc00                // sizeof(textSection) + sizeof(dataSection) + relocation of a.out
#0x271800		// config address in an os.bin * //sizeof(pix613.bin) - 0x4800
#0x275000		// config address in an os.bin * //sizeof(pix613.bin) - 0x1000
0x0  0x80000e9c  	// allocb *
0x1  0x8000103c 	// freeb  *
0x2  0x8000144c		// open   *
0x3  0x800015c0    	// put    *
0x4  0x800014d8		// close  *
0x5  0x80215904   	// atoip  *
0x6  0x8020f828		// memset *
0x7  0x80215288 	// memcpy *
0x8  0x80212134		// malloc *
0x9  0x80212620		// free   *
0xa  0x802105a4		// printf *
0xb  0x801fff30		// des_encrypt *
0xc  0x80215cb0		// isprint     *
0xd  0x802017a8		// des_set_key *
0xe  0x800a6b14		// sha         *
0xf  0x80214de8		// rand        *
0x15  0x80002840      // process_create    *
0x16  0x80003274      // process_suspend   *
0x17  0x800032dc      // process_sleep_for *
0x18  0x801f6674      // show_process      *
0x19  0x80003888      // bark              *
0x1a  0x8046af84      // cur_t             *
0x2a  0x3c		// rptr   #
0x2b  0x44		// wptr   #
0x2c  0x18		// inIfc  #
0x2d  0x50		// iftype #
0x30  0x80478af4	//zero_security_level *
0x31  0x80478af8	// zero_name  *
0x32  0x80478ad8	// zero_ip    *
0x33  0x1cc		// length     #
0x34  0x804747f0	// num_nics   *
0x35  0x8025a880	// internal_clock  *
0x36  0x804717a0        // addr of flash structure  *
;
; ------------------- END OF SECTION I ----------------------------
;
:EOS:
;
; ------------------- START OF SECTION II -------------------------
;
; The second section contains keyword-value pairs that
; are set dynamically based on the current session/connection.
;
; Entries in this section will be obtained by keyword.
; The format for each line is:
;
;   * keyword must begin in first column
;   * keyword must be followed by at least one space (not tab)
;   * value must be at least one character long
;
; The generic routine "bfl_fetchOsVal" will return a
; pointer to the value associated with the supplied
; keyword. The value is returned as a string containing
; all of the characters following the keyword and
; the first space character after the keyword.
; It's up to the calling routine to interpret the result
; appropriately.
;
; A convenience routine, "bfl_fetchOsUns", is provided
; to simplify the retrieval of 32-bit values. This
; routine uses strtoul to interpret the value.
; The value is assumed to be a base 10 value unless preceded
; with 0x (hex) or 0 (octal).
; [See "strtoul" with a base parameter of zero.]
; Callers of this routine don't have to worry about free'ing
; memory.
;
InterfaceAddr          0x80478ad8      // matches entry 0x32 above  *
InterfaceLeng          0x11f8	       // 10 times entry 0x33 above 
IntSecurityOffset      0x1c            // #
IntNameOffset          0x20            // #
MaxInterfaces          0x804747f0      // matches entry 0x34 above   *
FlashClassAddr         0x804717a0      // matches entry 0x36 above   *
CryptoDeviceAddr       0x8025a8a0      // *
ArpTableAddrPtr        0x80247c6c      // addr of first entry in ARP table *
ArpTableLastPtr        0x804724ac      // addr of last entry in ARP table  *
NumInterfaces          0x804747f0      // addr of pointer to number of interfaces *
IfaceStruct2           0x804724b0      // addr of pointer to second smaller interface struct  *
IfaceStruct2Len        0x44            // length of 2nd smaller interface struct used by arp cache
BiosClassAddr          0x80471770      // addr of the bios class structure                    *
BiosWriteAddr1         0x8005FCCC      // addr of the bios write function for AT29C257 bios   *
BiosWriteAddr2         0x8006384c      // addr of the bios write function for AM29F400B bios  *
BiosWriteAddr3         0x80063E88      // addr of the bios write function for E28F400B5T bios *
BiosWriteAddr4         0x800656e8      // addr of the bios write function for DA28F320J5 bios *
BiosWriteAddr5         0x80065e74      // addr of the bios write function for E28F640J3 bios  *
BiosWriteOffset        0x00000020      // offset into the bios structure where write addr is located  #
BiosReadE28F6          0x80065b4c      // addr of the bios read function for e28f640j3 chip   *
BiosLockE28F6          0x80066054      // addr of the bios block lock/unlock function for e28f640j3 chip  *


;
; ------------------- END OF SECTION II ---------------------------
;
:EOS:
;
