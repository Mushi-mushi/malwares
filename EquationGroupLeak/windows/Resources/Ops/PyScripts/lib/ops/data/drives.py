
from ops.data import OpsClass, OpsField, DszObject, DszCommandObject, cmd_definitions
import dsz
if ('drives' not in cmd_definitions):
    dszdriveitem = OpsClass('driveitem', {'maximumcomponentlength': OpsField('maximumcomponentlength', dsz.TYPE_INT), 'drivesource': OpsField('drivesource', dsz.TYPE_STRING), 'drive': OpsField('drive', dsz.TYPE_STRING), 'type': OpsField('type', dsz.TYPE_STRING), 'serialnumber': OpsField('serialnumber', dsz.TYPE_STRING), 'filesystem': OpsField('filesystem', dsz.TYPE_STRING), 'options': OpsField('options', dsz.TYPE_STRING), 'attributes': OpsClass('attributes', {'casepreservednames': OpsField('casepreservednames', dsz.TYPE_BOOL), 'quotas': OpsField('quotas', dsz.TYPE_BOOL), 'supportssparsefiles': OpsField('supportssparsefiles', dsz.TYPE_BOOL), 'casesensitivesearch': OpsField('casesensitivesearch', dsz.TYPE_BOOL), 'iscompressed': OpsField('iscompressed', dsz.TYPE_BOOL), 'persistentacls': OpsField('persistentacls', dsz.TYPE_BOOL), 'supportsnamestreams': OpsField('supportsnamestreams', dsz.TYPE_BOOL), 'supportsremotestorage': OpsField('supportsremotestorage', dsz.TYPE_BOOL), 'readpermission': OpsField('readpermission', dsz.TYPE_BOOL), 'filecompression': OpsField('filecompression', dsz.TYPE_BOOL), 'unicodeondisk': OpsField('unicodeondisk', dsz.TYPE_BOOL), 'supportsobjectids': OpsField('supportsobjectids', dsz.TYPE_BOOL), 'writepermission': OpsField('writepermission', dsz.TYPE_BOOL), 'supportsreparsepoints': OpsField('supportsreparsepoints', dsz.TYPE_BOOL), 'supportsencryption': OpsField('supportsencryption', dsz.TYPE_BOOL)}, DszObject)}, DszObject, single=False)
    drivescommand = OpsClass('drives', {'driveitem': dszdriveitem}, DszCommandObject)
    cmd_definitions['drives'] = drivescommand