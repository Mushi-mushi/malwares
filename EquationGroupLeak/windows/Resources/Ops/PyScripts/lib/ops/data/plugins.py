
from ops.data import OpsClass, OpsField, DszObject, DszCommandObject, cmd_definitions
import dsz
if ('plugins' not in cmd_definitions):
    dszplugin = OpsClass('plugins', {'address': OpsField('address', dsz.TYPE_STRING), 'plugin': OpsClass('plugin', {'core': OpsField('core', dsz.TYPE_BOOL), 'reallyloaded': OpsField('reallyloaded', dsz.TYPE_BOOL), 'loadcount': OpsField('loadcount', dsz.TYPE_INT), 'id': OpsField('id', dsz.TYPE_INT), 'name': OpsField('name', dsz.TYPE_STRING), 'loaderinfo': OpsField('loaderinfo', dsz.TYPE_STRING), 'registeredapis': OpsClass('registeredapis', {'interface': OpsField('interface', dsz.TYPE_INT), 'provider': OpsField('provider', dsz.TYPE_INT)}, DszObject, single=False), 'acquiredapis': OpsClass('acquiredapis', {'interface': OpsField('interface', dsz.TYPE_INT), 'provider': OpsField('provider', dsz.TYPE_INT), 'providedby': OpsField('providedby', dsz.TYPE_STRING)}, DszObject, single=False), 'version': OpsClass('version', {'lla': OpsClass('lla', {'major': OpsField('major', dsz.TYPE_INT), 'minor': OpsField('minor', dsz.TYPE_INT), 'revision': OpsField('revision', dsz.TYPE_INT)}, DszObject, single=True), 'module': OpsClass('module', {'major': OpsField('major', dsz.TYPE_INT), 'minor': OpsField('minor', dsz.TYPE_INT), 'revision': OpsField('revision', dsz.TYPE_INT), 'flags': OpsClass('flags', {'value': OpsField('value', dsz.TYPE_INT), 'target': OpsField('target', dsz.TYPE_BOOL), 'lp': OpsField('lp', dsz.TYPE_BOOL)}, DszObject, single=True)}, DszObject, single=True), 'buildenvironment': OpsClass('buildenvironment', {'major': OpsField('major', dsz.TYPE_INT), 'minor': OpsField('minor', dsz.TYPE_INT), 'revision': OpsField('revision', dsz.TYPE_INT), 'typevalue': OpsField('typevalue', dsz.TYPE_INT), 'type': OpsField('type', dsz.TYPE_STRING)}, DszObject, single=True)}, DszObject, single=True)}, DszObject, single=False)}, DszObject, single=True)
    pluginscommand = OpsClass('plugins', {'local': dszplugin, 'remote': dszplugin}, DszCommandObject)
    cmd_definitions['plugins'] = pluginscommand