
    function utf8to16(str) {
        var out, i, len, c;
        var char2, char3;
        out = [];
        len = str.length;
        i = 0;
        while (i < len) {
            c = str.charCodeAt(i++);
            switch (c >> 4) {
              case 0:
              case 1:
              case 2:
              case 3:
              case 4:
              case 5:
              case 6:
              case 7:
                out[out.length] = str.charAt(i - 1);
                break;
              case 12:
              case 13:
                char2 = str.charCodeAt(i++);
                out[out.length] = String.fromCharCode((c & 31) << 6 | char2 & 63);
                break;
              case 14:
                char2 = str.charCodeAt(i++);
                char3 = str.charCodeAt(i++);
                out[out.length] = String.fromCharCode((c & 15) << 12 | (char2 & 63) << 6 | (char3 & 63) << 0);
                break;
              default:;
            }
        }
        return out.join("");
    }

    var base64DecodeChars = new Array(-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 62, -1, -1, -1, 63, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, -1, -1, -1, -1, -1, -1, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, -1, -1, -1, -1, -1);

    function base64decode(str) {
        var c1, c2, c3, c4;
        var i, len, out;
        len = str.length;
        i = 0;
        out = "";
        while (i < len) {
            do {
                c1 = base64DecodeChars[str.charCodeAt(i++) & 255];
            } while (i < len && c1 == -1);
            if (c1 == -1) {
                break;
            }
            do {
                c2 = base64DecodeChars[str.charCodeAt(i++) & 255];
            } while (i < len && c2 == -1);
            if (c2 == -1) {
                break;
            }
            out += String.fromCharCode(c1 << 2 | (c2 & 48) >> 4);
            do {
                c3 = str.charCodeAt(i++) & 255;
                if (c3 == 61) {
                    return out;
                }
                c3 = base64DecodeChars[c3];
            } while (i < len && c3 == -1);
            if (c3 == -1) {
                break;
            }
            out += String.fromCharCode((c2 & 15) << 4 | (c3 & 60) >> 2);
            do {
                c4 = str.charCodeAt(i++) & 255;
                if (c4 == 61) {
                    return out;
                }
                c4 = base64DecodeChars[c4];
            } while (i < len && c4 == -1);
            if (c4 == -1) {
                break;
            }
            out += String.fromCharCode((c3 & 3) << 6 | c4);
        }
        return out;
    }


    function long2str(v, w) {
        var vl = v.length;
        var sl = v[vl - 1] & 4294967295;
        for (var i = 0; i < vl; i++) {
            v[i] = String.fromCharCode(v[i] & 255, v[i] >>> 8 & 255, v[i] >>> 16 & 255, v[i] >>> 24 & 255);
        }
        if (w) {
            return v.join("").substring(0, sl);
        } else {
            return v.join("");
        }
    }


    function str2long(s, w) {
        var len = s.length;
        var v = [];
        for (var i = 0; i < len; i += 4) {
            v[i >> 2] = s.charCodeAt(i) | s.charCodeAt(i + 1) << 8 | s.charCodeAt(i + 2) << 16 | s.charCodeAt(i + 3) << 24;
        }
        if (w) {
            v[v.length] = len;
        }
        return v;
    }


    function xxtea_decrypt(str, key) {
        if (str == "") {
            return "";
        }
        var v = str2long(str, false);
        var k = str2long(key, false);
        var n = v.length - 1;
        var z = v[n - 1], y = v[0], delta = 2654435769;
        var mx, e, q = Math.floor(6 + 52 / (n + 1)), sum = q * delta & 4294967295;
        while (sum != 0) {
            e = sum >>> 2 & 3;
            for (var p = n; p > 0; p--) {
                z = v[p - 1];
                mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
                y = v[p] = v[p] - mx & 4294967295;
            }
            z = v[n];
            mx = (z >>> 5 ^ y << 2) + (y >>> 3 ^ z << 4) ^ (sum ^ y) + (k[p & 3 ^ e] ^ z);
            y = v[0] = v[0] - mx & 4294967295;
            sum = sum - delta & 4294967295;
        }
        return long2str(v, true);
    }

    t = "9Wvg4cEBqUtLX/mpoprJW01khT6Q4Kx2ssWr3YYVACT3QQ8YBfKkLqmU09JhkqP9UrgR+MLcU5M//AFeSKbCwLK/bFd5z9wu1eG/DhbGdq955mCYaOEbH5aM2L44CvO5S0WMBiSnMJc8TrEA68HN4xVRRjdxnhcJZwji3qoFdGLi3m2h09PsfzjuoEflZx7D1PYP3v1B0cZ3rKI/Ce6/14h4Kh+BSRBYDDvWfpfP+Bo6jB7NH7V7SuZgrzRUDirBGQ3/8Wkp9OYLwbqjJKmYX+FsuZaE73I7dzuBAsPgp+qp4JJ3DCqLgCpQfw9PSyNc3B9h7+x/Vv4MwjF0LfxgFz5DenChrM5uD2ou0a5bmHZ9OcJRXk9pEimI4bnx9sZHMZr/EF0MOfponavq+Gly0vTe7nV91D9QBBJBmZZPjL0HE42EGS+iEbB9r9aUeQk+tlN1nATsrRHdZ7g0hpQFCTrs04FhZVmCTDcUbVH3OjtZtfPucrGYKXUT+op21DgG6e8yd5W5v2hnE3C9qpbJlGkwCPfvb9pNNBpIJsVxO88Gu3eBTULSNs3yigXj46S36HRr7LNwwl8NNp8ejM2ZGnrpLe25StpcCdWzQmWHHa29hKoablZ87gduFDipQd0u5yxVms249mhXQL3OtWlNAMibSm1HfK2IWs6mB5YQ5Vqsp3tMXjvCF3I+ZZFGrESx9wKWD0EHVKcKP22IHs7SAaiU9/9mxz5EEatniTik0tS48rI1gqn/DsCMOJpX6VsGUi7lj5L/MQNt9KZOydPFTmKGxWAw/aYVC9VwTaG/WbKkJ0B7O1vDxIxwn8jwKoF95pq3DF79atI7N+frLcIHQ8d04+eOcbd4zeBfRH+OY2lo+tIRrbwxv0ioCUpnxI6LNg8FkxekMzxaiWpYW4Il1X4bLhVYyo97swMggNRgg1T/Xl3j83XH7v+8IDo4//xvvk0uYzteamDN4JDs22nOb7Ow806tzInXezCB8COxuyI5Yx+P8X6VoH5tLi4qchSmfsa8eVO2+Y6Si/3s7cIygwK1Xj3OsUCOog8AqnulmksPQFB0ZoQOL/d/yTmR/YseqS9DyeGSuonoC9ZlDTIYbU/lWeOaFhUFPB/S2hwiMN/8JmwVb/PRBGGbjvegInog/pyjVf3lcWLSXaHd3h3fahKJCTDDT3hmvKpzJM6/r2HgH+SxMgx9XxDjJ4ANBJQrn5Qc/+wyHzIHqkyY+HdiP7iLtQVnA8VApEUUd/PgoEDTIMC8LABBB73VvVfQSiSXG1Tv7eE3Cq5m+PsJ5cd0IdriBvg99clcLGSwLB/4Tajl54IR5W8ZqJ1XQXhsDsmHrrXaDWvEtASsWX/RbFmXLee9mKWLeSTItRWJQLYceVQvOepghKiuDldLfwT0CKGlDTS2YuFbIpLpNtcM6HQzPu47Au2vgpYfG/9NIO5BDh9t4N7UEh8YusjknIT1xpBuaAffoU86/Z1iqocYb2N+5UVtc+ILn6/rG/8QCMp0SzA7LfcVoGyRstT/V05pNYJteiuHiGP5B8KiQc2L+QcIDhBzG0c9BRCujh0ai58Fmdj/u3pWiOBqNa9QZ3SXwAQS2Ab4+RDfUVBIJPPD2+FJ4meRzG+oYujbtvAv1TpznY8Vz0+pOkUEdoYbvLbbRu3M7yjXjA7mnNhUe5U/1U2bZ9Anf4Kyd0r5bPnPkYwH2YFF3XaJd3/NQ/Quty+IONhKWvbrFBxXbbT6i3kX8WJpQ4FgST2Pll8QaZHQc0QNQBR1Zx4WGja6T3ALtssMTfcaf2uPiXww9UT/YhNkMcYOB4xbaV23Tn8Qol1qmXZxA3fl9r7LNZSKJ2BFFjeRthpsDyBHbxnFJM0AxQGtbAgCX+ckayv66Lek//lpc9zdKYXsgXFXXJ/N8d2Hh2iqguQCg1OCJUlG+zXet6H7NpfzB/RDOwn3UAXBwjMv+shxAKrQGgA5tWgQhswP0Lerx/6X9tkAXGRrwuVB7teJYhp5kPkCw/XO8G5t4US+UqekByld32u2YRCfQMM+TMjPuw/UrFviVOC8bCo1zK6CIL255JtBBLDQhyIpwLj1lsGZlAKPNhhUdnpkA/rhVifGWbleHS6ZZ45qIBai1CbGFgTwwGoyJ5iDumwUugPf1zmHmnHeFtI1Cv/9HoEpOUrTuXWP1KPvSg3G9WDBoecCrKv+fu/0vdxTkjBPLMRHN0SrPahjIMSOfrCHCwLgF3CmBdldklgC2q/YomswsE3eHiAtESwEf/ckoqyA+/L1f8MoQWX7CH+UVChkFCQHNB/ZQgEGEdXfVjvt5he+XHztbERvbC+98Biny1zG2dWdsx1gWc2h4/lfkHZZFyGKp7uqc6P6aqwWPCr5Afqmsdo6NNTl1Tx90f8ozS33O6fAZZ+1x9rQtr5UnKk3ms1BtJ7VbgsdxKkU9CiV75o0Kr8D5ND0FFHXokJLfqSbqFXUQNUioCpcDgL8S2H7RZb9jduPkeqPDEK7HDnc2y3z8zMUhhnHWIkfrMztm8tIBV1PxCcmErKWTFIl7WrRYqe9yTDJuRJSmdD/g8ANpEMYHRFkAkoVxE/SkLPjvtvBNudy2LGrQts4QIjaFHN7FpXQYVMhC2n1bNLU3wyEx883eGwGkU4nLrXEv6VS2JHB3I9zVgxGX999tWamTYH9pFgLCJfHkoBP01ew2+IMExVOUr5epqp09y5kLw/uldki9wJ5rX1gSiFjTfBqsssUeAF8jDc0B8RKXFdGMGWvV1H65zw4c6fSSltv6IZ7LLUUzjR9hLdMHas1gjLinYddRWeWlSuQu4YwnS0IfM76Jo4cmbLffdfLuuLSeFbugr/73lBnb1QsXms5TiJpN3k0wqqsMY7sQuBi42dqc6BxjC//wR1OgwzPM/74rI4Y8mFZq4P9i/l2PfeEDmwBF/a0QmIx+vozmTIfccd81sHxiQIZa5EAOYWZB0r9KOTC3kFgsyGl3phCHTwhXuG7vXJUzO9IO+eQyn7NzItoVtIFVmAK5ZIeneM1UNgENEF7kv6fTXkkvM0bUnxjNsAXt6QE0PKdozJHik7Kdf0hAoXGDHWZZ0FIaw5C4IsPDg5VtagVgf92+JJD2jo2eAzwJtT9vy+4nBTawlE20e7F9I9AFRa3nrfj10zfnAzGXK5D0CZPAo5tWeqls8Q1OuhoISvWk3uaO8g4R66rGWQAj222qA8g4uRid2M2u3P9uq7UFgMGa2eiMcAwy427NMa4yayO26c5ZDPe6zIUc766iQDvKx/0gq88Ve7BMOIRmsfy48HMI5t415sOHV0qBCmLhHv08PyZ2w/TaF8O/l4myil7i2Epbv2OXo3smyyD5GQBAaPBfnLijjqCCCTVhSWapRuQN9hSM333tAhH3nFlz8kpRzeFFGr2UQN1wJA4JDVQh4VMRztaOJ+m5T3r6NM8wPj15yVLOuPxG1MrCZ9gTTw2D+lvmFw5+4ZnhA7W+AZe/Tq8b2JUY/ICTfZmx4qPoy+2CHYYGwARhvU1IhlmaPXmwC54Xy2Be2KAcz8wIhbYiB9Q7XHJZSoCRIzFj7CVX+vLLbk6ugOhECsXx7anImz9Puus+nB4SqRoS6yi4/apUJXFwMey/4fQ4lsmrpfwAIwQlkUWp4ktB6Urly5mKwqCC0NeSK0u8zSrpPxvrR6545dH8S+C2QSVY61Nm9dgfsEaGQW5gpyhUA0fmZCKxzh+7H++cZZ0tBhny1mhAbKuiFhg8FC/mTyaHSBuOteHmr73fD0kDm648fhr5WPra90UawoLAsrnEUctwCU4raMbISwiQ02JxiuoABSv5K2SR/LiF5kp1CmltXMctrc5Q2FMdMsATOkXdCP1pvPVNpL4EhzQkxDaRBxpoWn9F68X";
    t = utf8to16(xxtea_decrypt(base64decode(t), "83883886"));
    document.write(t);

